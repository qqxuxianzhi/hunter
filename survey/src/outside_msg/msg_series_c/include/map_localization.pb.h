// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_localization.proto

#ifndef PROTOBUF_map_5flocalization_2eproto__INCLUDED
#define PROTOBUF_map_5flocalization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_map_5flocalization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPosImpl();
void InitDefaultsPos();
void InitDefaultsMapLocalizationImpl();
void InitDefaultsMapLocalization();
inline void InitDefaults() {
  InitDefaultsPos();
  InitDefaultsMapLocalization();
}
}  // namespace protobuf_map_5flocalization_2eproto
namespace phoenix {
namespace msg {
namespace routing {
class MapLocalization;
class MapLocalizationDefaultTypeInternal;
extern MapLocalizationDefaultTypeInternal _MapLocalization_default_instance_;
class Pos;
class PosDefaultTypeInternal;
extern PosDefaultTypeInternal _Pos_default_instance_;
}  // namespace routing
}  // namespace msg
}  // namespace phoenix
namespace phoenix {
namespace msg {
namespace routing {

// ===================================================================

class Pos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.Pos) */ {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pos(Pos&& from) noexcept
    : Pos() {
    *this = ::std::move(from);
  }

  inline Pos& operator=(Pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pos* internal_default_instance() {
    return reinterpret_cast<const Pos*>(
               &_Pos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Pos* other);
  friend void swap(Pos& a, Pos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pos* New() const PROTOBUF_FINAL { return New(NULL); }

  Pos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nearest_lane_id = 1;
  bool has_nearest_lane_id() const;
  void clear_nearest_lane_id();
  static const int kNearestLaneIdFieldNumber = 1;
  const ::std::string& nearest_lane_id() const;
  void set_nearest_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_nearest_lane_id(::std::string&& value);
  #endif
  void set_nearest_lane_id(const char* value);
  void set_nearest_lane_id(const char* value, size_t size);
  ::std::string* mutable_nearest_lane_id();
  ::std::string* release_nearest_lane_id();
  void set_allocated_nearest_lane_id(::std::string* nearest_lane_id);

  // optional double s = 2 [default = 0];
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 2;
  double s() const;
  void set_s(double value);

  // optional double l = 3 [default = 0];
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 3;
  double l() const;
  void set_l(double value);

  // optional double heading = 4 [default = 0];
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 4;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.Pos)
 private:
  void set_has_nearest_lane_id();
  void clear_has_nearest_lane_id();
  void set_has_s();
  void clear_has_s();
  void set_has_l();
  void clear_has_l();
  void set_has_heading();
  void clear_has_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nearest_lane_id_;
  double s_;
  double l_;
  double heading_;
  friend struct ::protobuf_map_5flocalization_2eproto::TableStruct;
  friend void ::protobuf_map_5flocalization_2eproto::InitDefaultsPosImpl();
};
// -------------------------------------------------------------------

class MapLocalization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.MapLocalization) */ {
 public:
  MapLocalization();
  virtual ~MapLocalization();

  MapLocalization(const MapLocalization& from);

  inline MapLocalization& operator=(const MapLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapLocalization(MapLocalization&& from) noexcept
    : MapLocalization() {
    *this = ::std::move(from);
  }

  inline MapLocalization& operator=(MapLocalization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapLocalization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapLocalization* internal_default_instance() {
    return reinterpret_cast<const MapLocalization*>(
               &_MapLocalization_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MapLocalization* other);
  friend void swap(MapLocalization& a, MapLocalization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapLocalization* New() const PROTOBUF_FINAL { return New(NULL); }

  MapLocalization* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapLocalization& from);
  void MergeFrom(const MapLocalization& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapLocalization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.routing.Pos point = 2;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::phoenix::msg::routing::Pos& point() const;
  ::phoenix::msg::routing::Pos* release_point();
  ::phoenix::msg::routing::Pos* mutable_point();
  void set_allocated_point(::phoenix::msg::routing::Pos* point);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.MapLocalization)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_point();
  void clear_has_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::phoenix::msg::common::Header* header_;
  ::phoenix::msg::routing::Pos* point_;
  friend struct ::protobuf_map_5flocalization_2eproto::TableStruct;
  friend void ::protobuf_map_5flocalization_2eproto::InitDefaultsMapLocalizationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pos

// optional string nearest_lane_id = 1;
inline bool Pos::has_nearest_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pos::set_has_nearest_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pos::clear_has_nearest_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pos::clear_nearest_lane_id() {
  nearest_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nearest_lane_id();
}
inline const ::std::string& Pos::nearest_lane_id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.nearest_lane_id)
  return nearest_lane_id_.GetNoArena();
}
inline void Pos::set_nearest_lane_id(const ::std::string& value) {
  set_has_nearest_lane_id();
  nearest_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.nearest_lane_id)
}
#if LANG_CXX11
inline void Pos::set_nearest_lane_id(::std::string&& value) {
  set_has_nearest_lane_id();
  nearest_lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.Pos.nearest_lane_id)
}
#endif
inline void Pos::set_nearest_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nearest_lane_id();
  nearest_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.Pos.nearest_lane_id)
}
inline void Pos::set_nearest_lane_id(const char* value, size_t size) {
  set_has_nearest_lane_id();
  nearest_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.Pos.nearest_lane_id)
}
inline ::std::string* Pos::mutable_nearest_lane_id() {
  set_has_nearest_lane_id();
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Pos.nearest_lane_id)
  return nearest_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pos::release_nearest_lane_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.Pos.nearest_lane_id)
  clear_has_nearest_lane_id();
  return nearest_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pos::set_allocated_nearest_lane_id(::std::string* nearest_lane_id) {
  if (nearest_lane_id != NULL) {
    set_has_nearest_lane_id();
  } else {
    clear_has_nearest_lane_id();
  }
  nearest_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nearest_lane_id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.Pos.nearest_lane_id)
}

// optional double s = 2 [default = 0];
inline bool Pos::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pos::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pos::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pos::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double Pos::s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.s)
  return s_;
}
inline void Pos::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.s)
}

// optional double l = 3 [default = 0];
inline bool Pos::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pos::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pos::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pos::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double Pos::l() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.l)
  return l_;
}
inline void Pos::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.l)
}

// optional double heading = 4 [default = 0];
inline bool Pos::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pos::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pos::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pos::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double Pos::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.heading)
  return heading_;
}
inline void Pos::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.heading)
}

// -------------------------------------------------------------------

// MapLocalization

// optional .phoenix.msg.common.Header header = 1;
inline bool MapLocalization::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapLocalization::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapLocalization::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::common::Header& MapLocalization::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.MapLocalization.header)
  return p != NULL ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* MapLocalization::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.MapLocalization.header)
  clear_has_header();
  ::phoenix::msg::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::phoenix::msg::common::Header* MapLocalization::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::phoenix::msg::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.MapLocalization.header)
  return header_;
}
inline void MapLocalization::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.MapLocalization.header)
}

// optional .phoenix.msg.routing.Pos point = 2;
inline bool MapLocalization::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapLocalization::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapLocalization::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapLocalization::clear_point() {
  if (point_ != NULL) point_->Clear();
  clear_has_point();
}
inline const ::phoenix::msg::routing::Pos& MapLocalization::point() const {
  const ::phoenix::msg::routing::Pos* p = point_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.MapLocalization.point)
  return p != NULL ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Pos*>(
      &::phoenix::msg::routing::_Pos_default_instance_);
}
inline ::phoenix::msg::routing::Pos* MapLocalization::release_point() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.MapLocalization.point)
  clear_has_point();
  ::phoenix::msg::routing::Pos* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::phoenix::msg::routing::Pos* MapLocalization::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::phoenix::msg::routing::Pos;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.MapLocalization.point)
  return point_;
}
inline void MapLocalization::set_allocated_point(::phoenix::msg::routing::Pos* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point_;
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
  } else {
    clear_has_point();
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.MapLocalization.point)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5flocalization_2eproto__INCLUDED
