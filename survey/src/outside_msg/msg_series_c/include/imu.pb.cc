// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#include "imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace phoenix {
namespace msg {
namespace localization {
class ImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Imu>
      _instance;
} _Imu_default_instance_;
}  // namespace localization
}  // namespace msg
}  // namespace phoenix
namespace protobuf_imu_2eproto {
void InitDefaultsImuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_header_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::phoenix::msg::localization::_Imu_default_instance_;
    new (ptr) ::phoenix::msg::localization::Imu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::localization::Imu::InitAsDefaultInstance();
}

void InitDefaultsImu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, pitch_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, accel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, accel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::localization::Imu, accel_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::phoenix::msg::localization::Imu)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::phoenix::msg::localization::_Imu_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "imu.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\timu.proto\022\030phoenix.msg.localization\032\014h"
      "eader.proto\"\235\001\n\003Imu\022*\n\006header\030\001 \001(\0132\032.ph"
      "oenix.msg.common.Header\022\020\n\010yaw_rate\030\002 \001("
      "\002\022\022\n\npitch_rate\030\003 \001(\002\022\021\n\troll_rate\030\004 \001(\002"
      "\022\017\n\007accel_x\030\005 \001(\002\022\017\n\007accel_y\030\006 \001(\002\022\017\n\007ac"
      "cel_z\030\007 \001(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imu.proto", &protobuf_RegisterTypes);
  ::protobuf_header_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_imu_2eproto
namespace phoenix {
namespace msg {
namespace localization {

// ===================================================================

void Imu::InitAsDefaultInstance() {
  ::phoenix::msg::localization::_Imu_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
void Imu::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kHeaderFieldNumber;
const int Imu::kYawRateFieldNumber;
const int Imu::kPitchRateFieldNumber;
const int Imu::kRollRateFieldNumber;
const int Imu::kAccelXFieldNumber;
const int Imu::kAccelYFieldNumber;
const int Imu::kAccelZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imu_2eproto::InitDefaultsImu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.localization.Imu)
}
Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&yaw_rate_, &from.yaw_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&accel_z_) -
    reinterpret_cast<char*>(&yaw_rate_)) + sizeof(accel_z_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.localization.Imu)
}

void Imu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_z_) -
      reinterpret_cast<char*>(&header_)) + sizeof(accel_z_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:phoenix.msg.localization.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  ::protobuf_imu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Imu& Imu::default_instance() {
  ::protobuf_imu_2eproto::InitDefaultsImu();
  return *internal_default_instance();
}

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.localization.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&yaw_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accel_z_) -
        reinterpret_cast<char*>(&yaw_rate_)) + sizeof(accel_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.localization.Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_yaw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pitch_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pitch_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roll_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_roll_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_accel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_accel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_accel_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.localization.Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.localization.Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.localization.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional float yaw_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw_rate(), output);
  }

  // optional float pitch_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch_rate(), output);
  }

  // optional float roll_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll_rate(), output);
  }

  // optional float accel_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->accel_x(), output);
  }

  // optional float accel_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->accel_y(), output);
  }

  // optional float accel_z = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->accel_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.localization.Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.localization.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // optional float yaw_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw_rate(), target);
  }

  // optional float pitch_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch_rate(), target);
  }

  // optional float roll_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll_rate(), target);
  }

  // optional float accel_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->accel_x(), target);
  }

  // optional float accel_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->accel_y(), target);
  }

  // optional float accel_z = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->accel_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.localization.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.localization.Imu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->header_);
    }

    // optional float yaw_rate = 2;
    if (has_yaw_rate()) {
      total_size += 1 + 4;
    }

    // optional float pitch_rate = 3;
    if (has_pitch_rate()) {
      total_size += 1 + 4;
    }

    // optional float roll_rate = 4;
    if (has_roll_rate()) {
      total_size += 1 + 4;
    }

    // optional float accel_x = 5;
    if (has_accel_x()) {
      total_size += 1 + 4;
    }

    // optional float accel_y = 6;
    if (has_accel_y()) {
      total_size += 1 + 4;
    }

    // optional float accel_z = 7;
    if (has_accel_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.localization.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.localization.Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.localization.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.localization.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitch_rate_ = from.pitch_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      roll_rate_ = from.roll_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      accel_x_ = from.accel_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      accel_y_ = from.accel_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      accel_z_ = from.accel_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.localization.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.localization.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(pitch_rate_, other->pitch_rate_);
  swap(roll_rate_, other->roll_rate_);
  swap(accel_x_, other->accel_x_);
  swap(accel_y_, other->accel_y_);
  swap(accel_z_, other->accel_z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_imu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)
