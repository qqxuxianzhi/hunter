// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef PROTOBUF_imu_2eproto__INCLUDED
#define PROTOBUF_imu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_imu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImuImpl();
void InitDefaultsImu();
inline void InitDefaults() {
  InitDefaultsImu();
}
}  // namespace protobuf_imu_2eproto
namespace phoenix {
namespace msg {
namespace localization {
class Imu;
class ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
}  // namespace localization
}  // namespace msg
}  // namespace phoenix
namespace phoenix {
namespace msg {
namespace localization {

// ===================================================================

class Imu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.localization.Imu) */ {
 public:
  Imu();
  virtual ~Imu();

  Imu(const Imu& from);

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(Imu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Imu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Imu* other);
  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Imu* New() const PROTOBUF_FINAL { return New(NULL); }

  Imu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Imu& from);
  void MergeFrom(const Imu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Imu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional float yaw_rate = 2;
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  static const int kYawRateFieldNumber = 2;
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // optional float pitch_rate = 3;
  bool has_pitch_rate() const;
  void clear_pitch_rate();
  static const int kPitchRateFieldNumber = 3;
  float pitch_rate() const;
  void set_pitch_rate(float value);

  // optional float roll_rate = 4;
  bool has_roll_rate() const;
  void clear_roll_rate();
  static const int kRollRateFieldNumber = 4;
  float roll_rate() const;
  void set_roll_rate(float value);

  // optional float accel_x = 5;
  bool has_accel_x() const;
  void clear_accel_x();
  static const int kAccelXFieldNumber = 5;
  float accel_x() const;
  void set_accel_x(float value);

  // optional float accel_y = 6;
  bool has_accel_y() const;
  void clear_accel_y();
  static const int kAccelYFieldNumber = 6;
  float accel_y() const;
  void set_accel_y(float value);

  // optional float accel_z = 7;
  bool has_accel_z() const;
  void clear_accel_z();
  static const int kAccelZFieldNumber = 7;
  float accel_z() const;
  void set_accel_z(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.localization.Imu)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_yaw_rate();
  void clear_has_yaw_rate();
  void set_has_pitch_rate();
  void clear_has_pitch_rate();
  void set_has_roll_rate();
  void clear_has_roll_rate();
  void set_has_accel_x();
  void clear_has_accel_x();
  void set_has_accel_y();
  void clear_has_accel_y();
  void set_has_accel_z();
  void clear_has_accel_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::phoenix::msg::common::Header* header_;
  float yaw_rate_;
  float pitch_rate_;
  float roll_rate_;
  float accel_x_;
  float accel_y_;
  float accel_z_;
  friend struct ::protobuf_imu_2eproto::TableStruct;
  friend void ::protobuf_imu_2eproto::InitDefaultsImuImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Imu

// optional .phoenix.msg.common.Header header = 1;
inline bool Imu::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Imu::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Imu::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::common::Header& Imu::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.header)
  return p != NULL ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* Imu::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.localization.Imu.header)
  clear_has_header();
  ::phoenix::msg::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::phoenix::msg::common::Header* Imu::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::phoenix::msg::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.localization.Imu.header)
  return header_;
}
inline void Imu::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.localization.Imu.header)
}

// optional float yaw_rate = 2;
inline bool Imu::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Imu::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Imu::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Imu::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
inline float Imu::yaw_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.yaw_rate)
  return yaw_rate_;
}
inline void Imu::set_yaw_rate(float value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.localization.Imu.yaw_rate)
}

// optional float pitch_rate = 3;
inline bool Imu::has_pitch_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Imu::set_has_pitch_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Imu::clear_has_pitch_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Imu::clear_pitch_rate() {
  pitch_rate_ = 0;
  clear_has_pitch_rate();
}
inline float Imu::pitch_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.pitch_rate)
  return pitch_rate_;
}
inline void Imu::set_pitch_rate(float value) {
  set_has_pitch_rate();
  pitch_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.localization.Imu.pitch_rate)
}

// optional float roll_rate = 4;
inline bool Imu::has_roll_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Imu::set_has_roll_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Imu::clear_has_roll_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Imu::clear_roll_rate() {
  roll_rate_ = 0;
  clear_has_roll_rate();
}
inline float Imu::roll_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.roll_rate)
  return roll_rate_;
}
inline void Imu::set_roll_rate(float value) {
  set_has_roll_rate();
  roll_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.localization.Imu.roll_rate)
}

// optional float accel_x = 5;
inline bool Imu::has_accel_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Imu::set_has_accel_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Imu::clear_has_accel_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Imu::clear_accel_x() {
  accel_x_ = 0;
  clear_has_accel_x();
}
inline float Imu::accel_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.accel_x)
  return accel_x_;
}
inline void Imu::set_accel_x(float value) {
  set_has_accel_x();
  accel_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.localization.Imu.accel_x)
}

// optional float accel_y = 6;
inline bool Imu::has_accel_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Imu::set_has_accel_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Imu::clear_has_accel_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Imu::clear_accel_y() {
  accel_y_ = 0;
  clear_has_accel_y();
}
inline float Imu::accel_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.accel_y)
  return accel_y_;
}
inline void Imu::set_accel_y(float value) {
  set_has_accel_y();
  accel_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.localization.Imu.accel_y)
}

// optional float accel_z = 7;
inline bool Imu::has_accel_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Imu::set_has_accel_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Imu::clear_has_accel_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Imu::clear_accel_z() {
  accel_z_ = 0;
  clear_has_accel_z();
}
inline float Imu::accel_z() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.localization.Imu.accel_z)
  return accel_z_;
}
inline void Imu::set_accel_z(float value) {
  set_has_accel_z();
  accel_z_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.localization.Imu.accel_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imu_2eproto__INCLUDED
