// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_ctl_cmd.proto

#ifndef PROTOBUF_chassis_5fctl_5fcmd_2eproto__INCLUDED
#define PROTOBUF_chassis_5fctl_5fcmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_chassis_5fctl_5fcmd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChassisCtlCmdImpl();
void InitDefaultsChassisCtlCmd();
inline void InitDefaults() {
  InitDefaultsChassisCtlCmd();
}
}  // namespace protobuf_chassis_5fctl_5fcmd_2eproto
namespace phoenix {
namespace msg {
namespace control {
class ChassisCtlCmd;
class ChassisCtlCmdDefaultTypeInternal;
extern ChassisCtlCmdDefaultTypeInternal _ChassisCtlCmd_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
namespace phoenix {
namespace msg {
namespace control {

enum ChassisCtlCmd_GearPosition {
  ChassisCtlCmd_GearPosition_GEAR_INVALID = 0,
  ChassisCtlCmd_GearPosition_GEAR_P = 1,
  ChassisCtlCmd_GearPosition_GEAR_N = 2,
  ChassisCtlCmd_GearPosition_GEAR_R = 3,
  ChassisCtlCmd_GearPosition_GEAR_D = 4
};
bool ChassisCtlCmd_GearPosition_IsValid(int value);
const ChassisCtlCmd_GearPosition ChassisCtlCmd_GearPosition_GearPosition_MIN = ChassisCtlCmd_GearPosition_GEAR_INVALID;
const ChassisCtlCmd_GearPosition ChassisCtlCmd_GearPosition_GearPosition_MAX = ChassisCtlCmd_GearPosition_GEAR_D;
const int ChassisCtlCmd_GearPosition_GearPosition_ARRAYSIZE = ChassisCtlCmd_GearPosition_GearPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_GearPosition_descriptor();
inline const ::std::string& ChassisCtlCmd_GearPosition_Name(ChassisCtlCmd_GearPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChassisCtlCmd_GearPosition_descriptor(), value);
}
inline bool ChassisCtlCmd_GearPosition_Parse(
    const ::std::string& name, ChassisCtlCmd_GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChassisCtlCmd_GearPosition>(
    ChassisCtlCmd_GearPosition_descriptor(), name, value);
}
enum ChassisCtlCmd_SignalLamp {
  ChassisCtlCmd_SignalLamp_LAMP_INVALID = 0,
  ChassisCtlCmd_SignalLamp_LAMP_OFF = 1,
  ChassisCtlCmd_SignalLamp_LAMP_ON = 2
};
bool ChassisCtlCmd_SignalLamp_IsValid(int value);
const ChassisCtlCmd_SignalLamp ChassisCtlCmd_SignalLamp_SignalLamp_MIN = ChassisCtlCmd_SignalLamp_LAMP_INVALID;
const ChassisCtlCmd_SignalLamp ChassisCtlCmd_SignalLamp_SignalLamp_MAX = ChassisCtlCmd_SignalLamp_LAMP_ON;
const int ChassisCtlCmd_SignalLamp_SignalLamp_ARRAYSIZE = ChassisCtlCmd_SignalLamp_SignalLamp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_SignalLamp_descriptor();
inline const ::std::string& ChassisCtlCmd_SignalLamp_Name(ChassisCtlCmd_SignalLamp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChassisCtlCmd_SignalLamp_descriptor(), value);
}
inline bool ChassisCtlCmd_SignalLamp_Parse(
    const ::std::string& name, ChassisCtlCmd_SignalLamp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChassisCtlCmd_SignalLamp>(
    ChassisCtlCmd_SignalLamp_descriptor(), name, value);
}
enum ChassisCtlCmd_SignalTurnLamp {
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_INVALID = 0,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_OFF = 1,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_LEFT = 2,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_RIGHT = 3,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_EMERGENCY = 4
};
bool ChassisCtlCmd_SignalTurnLamp_IsValid(int value);
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MIN = ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_INVALID;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MAX = ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_EMERGENCY;
const int ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_ARRAYSIZE = ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_SignalTurnLamp_descriptor();
inline const ::std::string& ChassisCtlCmd_SignalTurnLamp_Name(ChassisCtlCmd_SignalTurnLamp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChassisCtlCmd_SignalTurnLamp_descriptor(), value);
}
inline bool ChassisCtlCmd_SignalTurnLamp_Parse(
    const ::std::string& name, ChassisCtlCmd_SignalTurnLamp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChassisCtlCmd_SignalTurnLamp>(
    ChassisCtlCmd_SignalTurnLamp_descriptor(), name, value);
}
enum ChassisCtlCmd_EpbStatus {
  ChassisCtlCmd_EpbStatus_EPB_STATUS_INVALID = 0,
  ChassisCtlCmd_EpbStatus_EPB_STATUS_OFF = 1,
  ChassisCtlCmd_EpbStatus_EPB_STATUS_ON = 2
};
bool ChassisCtlCmd_EpbStatus_IsValid(int value);
const ChassisCtlCmd_EpbStatus ChassisCtlCmd_EpbStatus_EpbStatus_MIN = ChassisCtlCmd_EpbStatus_EPB_STATUS_INVALID;
const ChassisCtlCmd_EpbStatus ChassisCtlCmd_EpbStatus_EpbStatus_MAX = ChassisCtlCmd_EpbStatus_EPB_STATUS_ON;
const int ChassisCtlCmd_EpbStatus_EpbStatus_ARRAYSIZE = ChassisCtlCmd_EpbStatus_EpbStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_EpbStatus_descriptor();
inline const ::std::string& ChassisCtlCmd_EpbStatus_Name(ChassisCtlCmd_EpbStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChassisCtlCmd_EpbStatus_descriptor(), value);
}
inline bool ChassisCtlCmd_EpbStatus_Parse(
    const ::std::string& name, ChassisCtlCmd_EpbStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChassisCtlCmd_EpbStatus>(
    ChassisCtlCmd_EpbStatus_descriptor(), name, value);
}
enum ChassisCtlCmd_WiperStatus {
  ChassisCtlCmd_WiperStatus_WIPER_INVALID = 0,
  ChassisCtlCmd_WiperStatus_WIPER_OFF = 1,
  ChassisCtlCmd_WiperStatus_WIPER_SHORT_PRESS_WITH_CLICK = 2,
  ChassisCtlCmd_WiperStatus_WIPER_LONG_PRESS_WITH_CLICK = 3,
  ChassisCtlCmd_WiperStatus_WIPER_INT_1 = 4,
  ChassisCtlCmd_WiperStatus_WIPER_INT_2 = 5,
  ChassisCtlCmd_WiperStatus_WIPER_INT_3 = 6,
  ChassisCtlCmd_WiperStatus_WIPER_INT_4 = 7,
  ChassisCtlCmd_WiperStatus_WIPER_LO = 8,
  ChassisCtlCmd_WiperStatus_WIPER_HI = 9
};
bool ChassisCtlCmd_WiperStatus_IsValid(int value);
const ChassisCtlCmd_WiperStatus ChassisCtlCmd_WiperStatus_WiperStatus_MIN = ChassisCtlCmd_WiperStatus_WIPER_INVALID;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd_WiperStatus_WiperStatus_MAX = ChassisCtlCmd_WiperStatus_WIPER_HI;
const int ChassisCtlCmd_WiperStatus_WiperStatus_ARRAYSIZE = ChassisCtlCmd_WiperStatus_WiperStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_WiperStatus_descriptor();
inline const ::std::string& ChassisCtlCmd_WiperStatus_Name(ChassisCtlCmd_WiperStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChassisCtlCmd_WiperStatus_descriptor(), value);
}
inline bool ChassisCtlCmd_WiperStatus_Parse(
    const ::std::string& name, ChassisCtlCmd_WiperStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChassisCtlCmd_WiperStatus>(
    ChassisCtlCmd_WiperStatus_descriptor(), name, value);
}
// ===================================================================

class ChassisCtlCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.control.ChassisCtlCmd) */ {
 public:
  ChassisCtlCmd();
  virtual ~ChassisCtlCmd();

  ChassisCtlCmd(const ChassisCtlCmd& from);

  inline ChassisCtlCmd& operator=(const ChassisCtlCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChassisCtlCmd(ChassisCtlCmd&& from) noexcept
    : ChassisCtlCmd() {
    *this = ::std::move(from);
  }

  inline ChassisCtlCmd& operator=(ChassisCtlCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChassisCtlCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChassisCtlCmd* internal_default_instance() {
    return reinterpret_cast<const ChassisCtlCmd*>(
               &_ChassisCtlCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChassisCtlCmd* other);
  friend void swap(ChassisCtlCmd& a, ChassisCtlCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChassisCtlCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  ChassisCtlCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChassisCtlCmd& from);
  void MergeFrom(const ChassisCtlCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChassisCtlCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChassisCtlCmd_GearPosition GearPosition;
  static const GearPosition GEAR_INVALID =
    ChassisCtlCmd_GearPosition_GEAR_INVALID;
  static const GearPosition GEAR_P =
    ChassisCtlCmd_GearPosition_GEAR_P;
  static const GearPosition GEAR_N =
    ChassisCtlCmd_GearPosition_GEAR_N;
  static const GearPosition GEAR_R =
    ChassisCtlCmd_GearPosition_GEAR_R;
  static const GearPosition GEAR_D =
    ChassisCtlCmd_GearPosition_GEAR_D;
  static inline bool GearPosition_IsValid(int value) {
    return ChassisCtlCmd_GearPosition_IsValid(value);
  }
  static const GearPosition GearPosition_MIN =
    ChassisCtlCmd_GearPosition_GearPosition_MIN;
  static const GearPosition GearPosition_MAX =
    ChassisCtlCmd_GearPosition_GearPosition_MAX;
  static const int GearPosition_ARRAYSIZE =
    ChassisCtlCmd_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GearPosition_descriptor() {
    return ChassisCtlCmd_GearPosition_descriptor();
  }
  static inline const ::std::string& GearPosition_Name(GearPosition value) {
    return ChassisCtlCmd_GearPosition_Name(value);
  }
  static inline bool GearPosition_Parse(const ::std::string& name,
      GearPosition* value) {
    return ChassisCtlCmd_GearPosition_Parse(name, value);
  }

  typedef ChassisCtlCmd_SignalLamp SignalLamp;
  static const SignalLamp LAMP_INVALID =
    ChassisCtlCmd_SignalLamp_LAMP_INVALID;
  static const SignalLamp LAMP_OFF =
    ChassisCtlCmd_SignalLamp_LAMP_OFF;
  static const SignalLamp LAMP_ON =
    ChassisCtlCmd_SignalLamp_LAMP_ON;
  static inline bool SignalLamp_IsValid(int value) {
    return ChassisCtlCmd_SignalLamp_IsValid(value);
  }
  static const SignalLamp SignalLamp_MIN =
    ChassisCtlCmd_SignalLamp_SignalLamp_MIN;
  static const SignalLamp SignalLamp_MAX =
    ChassisCtlCmd_SignalLamp_SignalLamp_MAX;
  static const int SignalLamp_ARRAYSIZE =
    ChassisCtlCmd_SignalLamp_SignalLamp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalLamp_descriptor() {
    return ChassisCtlCmd_SignalLamp_descriptor();
  }
  static inline const ::std::string& SignalLamp_Name(SignalLamp value) {
    return ChassisCtlCmd_SignalLamp_Name(value);
  }
  static inline bool SignalLamp_Parse(const ::std::string& name,
      SignalLamp* value) {
    return ChassisCtlCmd_SignalLamp_Parse(name, value);
  }

  typedef ChassisCtlCmd_SignalTurnLamp SignalTurnLamp;
  static const SignalTurnLamp TURN_LAMP_INVALID =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_INVALID;
  static const SignalTurnLamp TURN_LAMP_OFF =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_OFF;
  static const SignalTurnLamp TURN_LAMP_LEFT =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_LEFT;
  static const SignalTurnLamp TURN_LAMP_RIGHT =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_RIGHT;
  static const SignalTurnLamp TURN_LAMP_EMERGENCY =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_EMERGENCY;
  static inline bool SignalTurnLamp_IsValid(int value) {
    return ChassisCtlCmd_SignalTurnLamp_IsValid(value);
  }
  static const SignalTurnLamp SignalTurnLamp_MIN =
    ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MIN;
  static const SignalTurnLamp SignalTurnLamp_MAX =
    ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MAX;
  static const int SignalTurnLamp_ARRAYSIZE =
    ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalTurnLamp_descriptor() {
    return ChassisCtlCmd_SignalTurnLamp_descriptor();
  }
  static inline const ::std::string& SignalTurnLamp_Name(SignalTurnLamp value) {
    return ChassisCtlCmd_SignalTurnLamp_Name(value);
  }
  static inline bool SignalTurnLamp_Parse(const ::std::string& name,
      SignalTurnLamp* value) {
    return ChassisCtlCmd_SignalTurnLamp_Parse(name, value);
  }

  typedef ChassisCtlCmd_EpbStatus EpbStatus;
  static const EpbStatus EPB_STATUS_INVALID =
    ChassisCtlCmd_EpbStatus_EPB_STATUS_INVALID;
  static const EpbStatus EPB_STATUS_OFF =
    ChassisCtlCmd_EpbStatus_EPB_STATUS_OFF;
  static const EpbStatus EPB_STATUS_ON =
    ChassisCtlCmd_EpbStatus_EPB_STATUS_ON;
  static inline bool EpbStatus_IsValid(int value) {
    return ChassisCtlCmd_EpbStatus_IsValid(value);
  }
  static const EpbStatus EpbStatus_MIN =
    ChassisCtlCmd_EpbStatus_EpbStatus_MIN;
  static const EpbStatus EpbStatus_MAX =
    ChassisCtlCmd_EpbStatus_EpbStatus_MAX;
  static const int EpbStatus_ARRAYSIZE =
    ChassisCtlCmd_EpbStatus_EpbStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EpbStatus_descriptor() {
    return ChassisCtlCmd_EpbStatus_descriptor();
  }
  static inline const ::std::string& EpbStatus_Name(EpbStatus value) {
    return ChassisCtlCmd_EpbStatus_Name(value);
  }
  static inline bool EpbStatus_Parse(const ::std::string& name,
      EpbStatus* value) {
    return ChassisCtlCmd_EpbStatus_Parse(name, value);
  }

  typedef ChassisCtlCmd_WiperStatus WiperStatus;
  static const WiperStatus WIPER_INVALID =
    ChassisCtlCmd_WiperStatus_WIPER_INVALID;
  static const WiperStatus WIPER_OFF =
    ChassisCtlCmd_WiperStatus_WIPER_OFF;
  static const WiperStatus WIPER_SHORT_PRESS_WITH_CLICK =
    ChassisCtlCmd_WiperStatus_WIPER_SHORT_PRESS_WITH_CLICK;
  static const WiperStatus WIPER_LONG_PRESS_WITH_CLICK =
    ChassisCtlCmd_WiperStatus_WIPER_LONG_PRESS_WITH_CLICK;
  static const WiperStatus WIPER_INT_1 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_1;
  static const WiperStatus WIPER_INT_2 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_2;
  static const WiperStatus WIPER_INT_3 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_3;
  static const WiperStatus WIPER_INT_4 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_4;
  static const WiperStatus WIPER_LO =
    ChassisCtlCmd_WiperStatus_WIPER_LO;
  static const WiperStatus WIPER_HI =
    ChassisCtlCmd_WiperStatus_WIPER_HI;
  static inline bool WiperStatus_IsValid(int value) {
    return ChassisCtlCmd_WiperStatus_IsValid(value);
  }
  static const WiperStatus WiperStatus_MIN =
    ChassisCtlCmd_WiperStatus_WiperStatus_MIN;
  static const WiperStatus WiperStatus_MAX =
    ChassisCtlCmd_WiperStatus_WiperStatus_MAX;
  static const int WiperStatus_ARRAYSIZE =
    ChassisCtlCmd_WiperStatus_WiperStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WiperStatus_descriptor() {
    return ChassisCtlCmd_WiperStatus_descriptor();
  }
  static inline const ::std::string& WiperStatus_Name(WiperStatus value) {
    return ChassisCtlCmd_WiperStatus_Name(value);
  }
  static inline bool WiperStatus_Parse(const ::std::string& name,
      WiperStatus* value) {
    return ChassisCtlCmd_WiperStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional int32 start_robotic_ctl = 2 [default = 0];
  bool has_start_robotic_ctl() const;
  void clear_start_robotic_ctl();
  static const int kStartRoboticCtlFieldNumber = 2;
  ::google::protobuf::int32 start_robotic_ctl() const;
  void set_start_robotic_ctl(::google::protobuf::int32 value);

  // optional bool enable_eps = 3 [default = false];
  bool has_enable_eps() const;
  void clear_enable_eps();
  static const int kEnableEpsFieldNumber = 3;
  bool enable_eps() const;
  void set_enable_eps(bool value);

  // optional bool enable_throttle_sys = 4 [default = false];
  bool has_enable_throttle_sys() const;
  void clear_enable_throttle_sys();
  static const int kEnableThrottleSysFieldNumber = 4;
  bool enable_throttle_sys() const;
  void set_enable_throttle_sys(bool value);

  // optional bool enable_ebs = 5 [default = false];
  bool has_enable_ebs() const;
  void clear_enable_ebs();
  static const int kEnableEbsFieldNumber = 5;
  bool enable_ebs() const;
  void set_enable_ebs(bool value);

  // optional bool enable_remote_ctl = 6 [default = false];
  bool has_enable_remote_ctl() const;
  void clear_enable_remote_ctl();
  static const int kEnableRemoteCtlFieldNumber = 6;
  bool enable_remote_ctl() const;
  void set_enable_remote_ctl(bool value);

  // optional bool enable_direct_ctl = 7 [default = false];
  bool has_enable_direct_ctl() const;
  void clear_enable_direct_ctl();
  static const int kEnableDirectCtlFieldNumber = 7;
  bool enable_direct_ctl() const;
  void set_enable_direct_ctl(bool value);

  // optional bool enable_acc = 8 [default = false];
  bool has_enable_acc() const;
  void clear_enable_acc();
  static const int kEnableAccFieldNumber = 8;
  bool enable_acc() const;
  void set_enable_acc(bool value);

  // optional bool release_throttle = 9 [default = false];
  bool has_release_throttle() const;
  void clear_release_throttle();
  static const int kReleaseThrottleFieldNumber = 9;
  bool release_throttle() const;
  void set_release_throttle(bool value);

  // optional float steering_wheel_angle = 10 [default = 0];
  bool has_steering_wheel_angle() const;
  void clear_steering_wheel_angle();
  static const int kSteeringWheelAngleFieldNumber = 10;
  float steering_wheel_angle() const;
  void set_steering_wheel_angle(float value);

  // optional float steering_wheel_speed = 11 [default = 0];
  bool has_steering_wheel_speed() const;
  void clear_steering_wheel_speed();
  static const int kSteeringWheelSpeedFieldNumber = 11;
  float steering_wheel_speed() const;
  void set_steering_wheel_speed(float value);

  // optional float steering_wheel_torque = 12 [default = 0];
  bool has_steering_wheel_torque() const;
  void clear_steering_wheel_torque();
  static const int kSteeringWheelTorqueFieldNumber = 12;
  float steering_wheel_torque() const;
  void set_steering_wheel_torque(float value);

  // optional float velocity = 13 [default = 0];
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 13;
  float velocity() const;
  void set_velocity(float value);

  // optional float acceleration = 14 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 14;
  float acceleration() const;
  void set_acceleration(float value);

  // optional float acc_value = 15 [default = 0];
  bool has_acc_value() const;
  void clear_acc_value();
  static const int kAccValueFieldNumber = 15;
  float acc_value() const;
  void set_acc_value(float value);

  // optional float brake_value = 16 [default = 0];
  bool has_brake_value() const;
  void clear_brake_value();
  static const int kBrakeValueFieldNumber = 16;
  float brake_value() const;
  void set_brake_value(float value);

  // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  static const int kGearFieldNumber = 17;
  ::phoenix::msg::control::ChassisCtlCmd_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::ChassisCtlCmd_GearPosition value);

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
  bool has_turn_lamp() const;
  void clear_turn_lamp();
  static const int kTurnLampFieldNumber = 18;
  ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp turn_lamp() const;
  void set_turn_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp value);

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
  bool has_brake_lamp() const;
  void clear_brake_lamp();
  static const int kBrakeLampFieldNumber = 19;
  ::phoenix::msg::control::ChassisCtlCmd_SignalLamp brake_lamp() const;
  void set_brake_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalLamp value);

  // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
  bool has_wiper() const;
  void clear_wiper();
  static const int kWiperFieldNumber = 20;
  ::phoenix::msg::control::ChassisCtlCmd_WiperStatus wiper() const;
  void set_wiper(::phoenix::msg::control::ChassisCtlCmd_WiperStatus value);

  // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
  bool has_epb_status() const;
  void clear_epb_status();
  static const int kEpbStatusFieldNumber = 21;
  ::phoenix::msg::control::ChassisCtlCmd_EpbStatus epb_status() const;
  void set_epb_status(::phoenix::msg::control::ChassisCtlCmd_EpbStatus value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.control.ChassisCtlCmd)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_start_robotic_ctl();
  void clear_has_start_robotic_ctl();
  void set_has_enable_eps();
  void clear_has_enable_eps();
  void set_has_enable_throttle_sys();
  void clear_has_enable_throttle_sys();
  void set_has_enable_ebs();
  void clear_has_enable_ebs();
  void set_has_enable_remote_ctl();
  void clear_has_enable_remote_ctl();
  void set_has_enable_direct_ctl();
  void clear_has_enable_direct_ctl();
  void set_has_enable_acc();
  void clear_has_enable_acc();
  void set_has_release_throttle();
  void clear_has_release_throttle();
  void set_has_steering_wheel_angle();
  void clear_has_steering_wheel_angle();
  void set_has_steering_wheel_speed();
  void clear_has_steering_wheel_speed();
  void set_has_steering_wheel_torque();
  void clear_has_steering_wheel_torque();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_acceleration();
  void clear_has_acceleration();
  void set_has_acc_value();
  void clear_has_acc_value();
  void set_has_brake_value();
  void clear_has_brake_value();
  void set_has_gear();
  void clear_has_gear();
  void set_has_turn_lamp();
  void clear_has_turn_lamp();
  void set_has_brake_lamp();
  void clear_has_brake_lamp();
  void set_has_wiper();
  void clear_has_wiper();
  void set_has_epb_status();
  void clear_has_epb_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::phoenix::msg::common::Header* header_;
  ::google::protobuf::int32 start_robotic_ctl_;
  bool enable_eps_;
  bool enable_throttle_sys_;
  bool enable_ebs_;
  bool enable_remote_ctl_;
  bool enable_direct_ctl_;
  bool enable_acc_;
  bool release_throttle_;
  float steering_wheel_angle_;
  float steering_wheel_speed_;
  float steering_wheel_torque_;
  float velocity_;
  float acceleration_;
  float acc_value_;
  float brake_value_;
  int gear_;
  int turn_lamp_;
  int brake_lamp_;
  int wiper_;
  int epb_status_;
  friend struct ::protobuf_chassis_5fctl_5fcmd_2eproto::TableStruct;
  friend void ::protobuf_chassis_5fctl_5fcmd_2eproto::InitDefaultsChassisCtlCmdImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChassisCtlCmd

// optional .phoenix.msg.common.Header header = 1;
inline bool ChassisCtlCmd::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChassisCtlCmd::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChassisCtlCmd::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::common::Header& ChassisCtlCmd::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.header)
  return p != NULL ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* ChassisCtlCmd::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.control.ChassisCtlCmd.header)
  clear_has_header();
  ::phoenix::msg::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::phoenix::msg::common::Header* ChassisCtlCmd::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::phoenix::msg::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.control.ChassisCtlCmd.header)
  return header_;
}
inline void ChassisCtlCmd::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.control.ChassisCtlCmd.header)
}

// optional int32 start_robotic_ctl = 2 [default = 0];
inline bool ChassisCtlCmd::has_start_robotic_ctl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChassisCtlCmd::set_has_start_robotic_ctl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChassisCtlCmd::clear_has_start_robotic_ctl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChassisCtlCmd::clear_start_robotic_ctl() {
  start_robotic_ctl_ = 0;
  clear_has_start_robotic_ctl();
}
inline ::google::protobuf::int32 ChassisCtlCmd::start_robotic_ctl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.start_robotic_ctl)
  return start_robotic_ctl_;
}
inline void ChassisCtlCmd::set_start_robotic_ctl(::google::protobuf::int32 value) {
  set_has_start_robotic_ctl();
  start_robotic_ctl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.start_robotic_ctl)
}

// optional bool enable_eps = 3 [default = false];
inline bool ChassisCtlCmd::has_enable_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChassisCtlCmd::set_has_enable_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChassisCtlCmd::clear_has_enable_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChassisCtlCmd::clear_enable_eps() {
  enable_eps_ = false;
  clear_has_enable_eps();
}
inline bool ChassisCtlCmd::enable_eps() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_eps)
  return enable_eps_;
}
inline void ChassisCtlCmd::set_enable_eps(bool value) {
  set_has_enable_eps();
  enable_eps_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_eps)
}

// optional bool enable_throttle_sys = 4 [default = false];
inline bool ChassisCtlCmd::has_enable_throttle_sys() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChassisCtlCmd::set_has_enable_throttle_sys() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChassisCtlCmd::clear_has_enable_throttle_sys() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChassisCtlCmd::clear_enable_throttle_sys() {
  enable_throttle_sys_ = false;
  clear_has_enable_throttle_sys();
}
inline bool ChassisCtlCmd::enable_throttle_sys() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_throttle_sys)
  return enable_throttle_sys_;
}
inline void ChassisCtlCmd::set_enable_throttle_sys(bool value) {
  set_has_enable_throttle_sys();
  enable_throttle_sys_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_throttle_sys)
}

// optional bool enable_ebs = 5 [default = false];
inline bool ChassisCtlCmd::has_enable_ebs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChassisCtlCmd::set_has_enable_ebs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChassisCtlCmd::clear_has_enable_ebs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChassisCtlCmd::clear_enable_ebs() {
  enable_ebs_ = false;
  clear_has_enable_ebs();
}
inline bool ChassisCtlCmd::enable_ebs() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_ebs)
  return enable_ebs_;
}
inline void ChassisCtlCmd::set_enable_ebs(bool value) {
  set_has_enable_ebs();
  enable_ebs_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_ebs)
}

// optional bool enable_remote_ctl = 6 [default = false];
inline bool ChassisCtlCmd::has_enable_remote_ctl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChassisCtlCmd::set_has_enable_remote_ctl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChassisCtlCmd::clear_has_enable_remote_ctl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChassisCtlCmd::clear_enable_remote_ctl() {
  enable_remote_ctl_ = false;
  clear_has_enable_remote_ctl();
}
inline bool ChassisCtlCmd::enable_remote_ctl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_remote_ctl)
  return enable_remote_ctl_;
}
inline void ChassisCtlCmd::set_enable_remote_ctl(bool value) {
  set_has_enable_remote_ctl();
  enable_remote_ctl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_remote_ctl)
}

// optional bool enable_direct_ctl = 7 [default = false];
inline bool ChassisCtlCmd::has_enable_direct_ctl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChassisCtlCmd::set_has_enable_direct_ctl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChassisCtlCmd::clear_has_enable_direct_ctl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChassisCtlCmd::clear_enable_direct_ctl() {
  enable_direct_ctl_ = false;
  clear_has_enable_direct_ctl();
}
inline bool ChassisCtlCmd::enable_direct_ctl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_direct_ctl)
  return enable_direct_ctl_;
}
inline void ChassisCtlCmd::set_enable_direct_ctl(bool value) {
  set_has_enable_direct_ctl();
  enable_direct_ctl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_direct_ctl)
}

// optional bool enable_acc = 8 [default = false];
inline bool ChassisCtlCmd::has_enable_acc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChassisCtlCmd::set_has_enable_acc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChassisCtlCmd::clear_has_enable_acc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChassisCtlCmd::clear_enable_acc() {
  enable_acc_ = false;
  clear_has_enable_acc();
}
inline bool ChassisCtlCmd::enable_acc() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_acc)
  return enable_acc_;
}
inline void ChassisCtlCmd::set_enable_acc(bool value) {
  set_has_enable_acc();
  enable_acc_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_acc)
}

// optional bool release_throttle = 9 [default = false];
inline bool ChassisCtlCmd::has_release_throttle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChassisCtlCmd::set_has_release_throttle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChassisCtlCmd::clear_has_release_throttle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChassisCtlCmd::clear_release_throttle() {
  release_throttle_ = false;
  clear_has_release_throttle();
}
inline bool ChassisCtlCmd::release_throttle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.release_throttle)
  return release_throttle_;
}
inline void ChassisCtlCmd::set_release_throttle(bool value) {
  set_has_release_throttle();
  release_throttle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.release_throttle)
}

// optional float steering_wheel_angle = 10 [default = 0];
inline bool ChassisCtlCmd::has_steering_wheel_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChassisCtlCmd::set_has_steering_wheel_angle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChassisCtlCmd::clear_has_steering_wheel_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChassisCtlCmd::clear_steering_wheel_angle() {
  steering_wheel_angle_ = 0;
  clear_has_steering_wheel_angle();
}
inline float ChassisCtlCmd::steering_wheel_angle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.steering_wheel_angle)
  return steering_wheel_angle_;
}
inline void ChassisCtlCmd::set_steering_wheel_angle(float value) {
  set_has_steering_wheel_angle();
  steering_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.steering_wheel_angle)
}

// optional float steering_wheel_speed = 11 [default = 0];
inline bool ChassisCtlCmd::has_steering_wheel_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChassisCtlCmd::set_has_steering_wheel_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChassisCtlCmd::clear_has_steering_wheel_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChassisCtlCmd::clear_steering_wheel_speed() {
  steering_wheel_speed_ = 0;
  clear_has_steering_wheel_speed();
}
inline float ChassisCtlCmd::steering_wheel_speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.steering_wheel_speed)
  return steering_wheel_speed_;
}
inline void ChassisCtlCmd::set_steering_wheel_speed(float value) {
  set_has_steering_wheel_speed();
  steering_wheel_speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.steering_wheel_speed)
}

// optional float steering_wheel_torque = 12 [default = 0];
inline bool ChassisCtlCmd::has_steering_wheel_torque() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChassisCtlCmd::set_has_steering_wheel_torque() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChassisCtlCmd::clear_has_steering_wheel_torque() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChassisCtlCmd::clear_steering_wheel_torque() {
  steering_wheel_torque_ = 0;
  clear_has_steering_wheel_torque();
}
inline float ChassisCtlCmd::steering_wheel_torque() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.steering_wheel_torque)
  return steering_wheel_torque_;
}
inline void ChassisCtlCmd::set_steering_wheel_torque(float value) {
  set_has_steering_wheel_torque();
  steering_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.steering_wheel_torque)
}

// optional float velocity = 13 [default = 0];
inline bool ChassisCtlCmd::has_velocity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChassisCtlCmd::set_has_velocity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChassisCtlCmd::clear_has_velocity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChassisCtlCmd::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline float ChassisCtlCmd::velocity() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.velocity)
  return velocity_;
}
inline void ChassisCtlCmd::set_velocity(float value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.velocity)
}

// optional float acceleration = 14 [default = 0];
inline bool ChassisCtlCmd::has_acceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChassisCtlCmd::set_has_acceleration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChassisCtlCmd::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChassisCtlCmd::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
inline float ChassisCtlCmd::acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.acceleration)
  return acceleration_;
}
inline void ChassisCtlCmd::set_acceleration(float value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.acceleration)
}

// optional float acc_value = 15 [default = 0];
inline bool ChassisCtlCmd::has_acc_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChassisCtlCmd::set_has_acc_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChassisCtlCmd::clear_has_acc_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChassisCtlCmd::clear_acc_value() {
  acc_value_ = 0;
  clear_has_acc_value();
}
inline float ChassisCtlCmd::acc_value() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.acc_value)
  return acc_value_;
}
inline void ChassisCtlCmd::set_acc_value(float value) {
  set_has_acc_value();
  acc_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.acc_value)
}

// optional float brake_value = 16 [default = 0];
inline bool ChassisCtlCmd::has_brake_value() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChassisCtlCmd::set_has_brake_value() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChassisCtlCmd::clear_has_brake_value() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChassisCtlCmd::clear_brake_value() {
  brake_value_ = 0;
  clear_has_brake_value();
}
inline float ChassisCtlCmd::brake_value() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.brake_value)
  return brake_value_;
}
inline void ChassisCtlCmd::set_brake_value(float value) {
  set_has_brake_value();
  brake_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.brake_value)
}

// optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
inline bool ChassisCtlCmd::has_gear() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChassisCtlCmd::set_has_gear() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChassisCtlCmd::clear_has_gear() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChassisCtlCmd::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::phoenix::msg::control::ChassisCtlCmd_GearPosition ChassisCtlCmd::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.gear)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_GearPosition >(gear_);
}
inline void ChassisCtlCmd::set_gear(::phoenix::msg::control::ChassisCtlCmd_GearPosition value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.gear)
}

// optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
inline bool ChassisCtlCmd::has_turn_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChassisCtlCmd::set_has_turn_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChassisCtlCmd::clear_has_turn_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChassisCtlCmd::clear_turn_lamp() {
  turn_lamp_ = 0;
  clear_has_turn_lamp();
}
inline ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.turn_lamp)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp >(turn_lamp_);
}
inline void ChassisCtlCmd::set_turn_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_IsValid(value));
  set_has_turn_lamp();
  turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.turn_lamp)
}

// optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
inline bool ChassisCtlCmd::has_brake_lamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChassisCtlCmd::set_has_brake_lamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChassisCtlCmd::clear_has_brake_lamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChassisCtlCmd::clear_brake_lamp() {
  brake_lamp_ = 0;
  clear_has_brake_lamp();
}
inline ::phoenix::msg::control::ChassisCtlCmd_SignalLamp ChassisCtlCmd::brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.brake_lamp)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp >(brake_lamp_);
}
inline void ChassisCtlCmd::set_brake_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalLamp value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_SignalLamp_IsValid(value));
  set_has_brake_lamp();
  brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.brake_lamp)
}

// optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
inline bool ChassisCtlCmd::has_wiper() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChassisCtlCmd::set_has_wiper() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChassisCtlCmd::clear_has_wiper() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChassisCtlCmd::clear_wiper() {
  wiper_ = 0;
  clear_has_wiper();
}
inline ::phoenix::msg::control::ChassisCtlCmd_WiperStatus ChassisCtlCmd::wiper() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.wiper)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus >(wiper_);
}
inline void ChassisCtlCmd::set_wiper(::phoenix::msg::control::ChassisCtlCmd_WiperStatus value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_WiperStatus_IsValid(value));
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.wiper)
}

// optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
inline bool ChassisCtlCmd::has_epb_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChassisCtlCmd::set_has_epb_status() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChassisCtlCmd::clear_has_epb_status() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChassisCtlCmd::clear_epb_status() {
  epb_status_ = 0;
  clear_has_epb_status();
}
inline ::phoenix::msg::control::ChassisCtlCmd_EpbStatus ChassisCtlCmd::epb_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.epb_status)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus >(epb_status_);
}
inline void ChassisCtlCmd::set_epb_status(::phoenix::msg::control::ChassisCtlCmd_EpbStatus value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_EpbStatus_IsValid(value));
  set_has_epb_status();
  epb_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.epb_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace msg
}  // namespace phoenix

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_GearPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_GearPosition>() {
  return ::phoenix::msg::control::ChassisCtlCmd_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp>() {
  return ::phoenix::msg::control::ChassisCtlCmd_SignalLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp>() {
  return ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus>() {
  return ::phoenix::msg::control::ChassisCtlCmd_EpbStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus>() {
  return ::phoenix::msg::control::ChassisCtlCmd_WiperStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chassis_5fctl_5fcmd_2eproto__INCLUDED
