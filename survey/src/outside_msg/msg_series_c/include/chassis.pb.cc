// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace phoenix {
namespace msg {
namespace control {
class ChassisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chassis>
      _instance;
} _Chassis_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
namespace protobuf_chassis_2eproto {
void InitDefaultsChassisImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_header_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::phoenix::msg::control::_Chassis_default_instance_;
    new (ptr) ::phoenix::msg::control::Chassis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::control::Chassis::InitAsDefaultInstance();
}

void InitDefaultsChassis() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChassisImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, e_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, eps_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, throttle_sys_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, ebs_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_angle_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_speed_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_torque_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, velocity_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, acceleration_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, yaw_rate_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, ax_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, ay_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl2_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr2_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, gear_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, signal_turning_indicator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, signal_turn_lamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, signal_brake_lamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, brake_pedal_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, acc_pedal_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_speed_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_torque_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_torque_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  9,
  7,
  10,
  12,
  11,
  13,
  16,
  14,
  17,
  15,
  18,
  20,
  19,
  21,
  24,
  22,
  25,
  23,
  26,
  28,
  27,
  29,
  36,
  30,
  37,
  31,
  32,
  33,
  34,
  35,
  40,
  41,
  42,
  43,
  38,
  44,
  39,
  45,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 51, sizeof(::phoenix::msg::control::Chassis)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::phoenix::msg::control::_Chassis_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "chassis.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rchassis.proto\022\023phoenix.msg.control\032\014he"
      "ader.proto\"\303\027\n\007Chassis\022*\n\006header\030\001 \001(\0132\032"
      ".phoenix.msg.common.Header\022T\n\014driving_mo"
      "de\030\002 \001(\0162(.phoenix.msg.control.Chassis.D"
      "rivingMode:\024DRIVING_MODE_INVALID\022B\n\006e_st"
      "op\030\003 \001(\0162\".phoenix.msg.control.Chassis.E"
      "Stop:\016E_STOP_INVALID\022N\n\neps_status\030\004 \001(\016"
      "2&.phoenix.msg.control.Chassis.EpsStatus"
      ":\022EPS_STATUS_INVALID\022h\n\023throttle_sys_sta"
      "tus\030\005 \001(\0162..phoenix.msg.control.Chassis."
      "ThrottleSysStatus:\033THROTTLE_SYS_STATUS_I"
      "NVALID\022N\n\nebs_status\030\006 \001(\0162&.phoenix.msg"
      ".control.Chassis.EbsStatus:\022EBS_STATUS_I"
      "NVALID\022)\n\032steering_wheel_angle_valid\030\007 \001"
      "(\010:\005false\022\037\n\024steering_wheel_angle\030\010 \001(\002:"
      "\0010\022)\n\032steering_wheel_speed_valid\030\t \001(\010:\005"
      "false\022\037\n\024steering_wheel_speed\030\n \001(\002:\0010\022*"
      "\n\033steering_wheel_torque_valid\030\013 \001(\010:\005fal"
      "se\022 \n\025steering_wheel_torque\030\014 \001(\002:\0010\022\035\n\016"
      "velocity_valid\030\r \001(\010:\005false\022\023\n\010velocity\030"
      "\016 \001(\002:\0010\022!\n\022acceleration_valid\030\017 \001(\010:\005fa"
      "lse\022\027\n\014acceleration\030\020 \001(\002:\0010\022\035\n\016yaw_rate"
      "_valid\030\021 \001(\010:\005false\022\023\n\010yaw_rate\030\022 \001(\002:\0010"
      "\022\027\n\010ax_valid\030\023 \001(\010:\005false\022\r\n\002ax\030\024 \001(\002:\0010"
      "\022\027\n\010ay_valid\030\025 \001(\010:\005false\022\r\n\002ay\030\026 \001(\002:\0010"
      "\022#\n\024wheel_speed_fl_valid\030\027 \001(\010:\005false\022\031\n"
      "\016wheel_speed_fl\030\030 \001(\002:\0010\022#\n\024wheel_speed_"
      "fr_valid\030\031 \001(\010:\005false\022\031\n\016wheel_speed_fr\030"
      "\032 \001(\002:\0010\022#\n\024wheel_speed_rl_valid\030\033 \001(\010:\005"
      "false\022\031\n\016wheel_speed_rl\030\034 \001(\002:\0010\022#\n\024whee"
      "l_speed_rr_valid\030\035 \001(\010:\005false\022\031\n\016wheel_s"
      "peed_rr\030\036 \001(\002:\0010\022$\n\025wheel_speed_rl2_vali"
      "d\030\037 \001(\010:\005false\022\032\n\017wheel_speed_rl2\030  \001(\002:"
      "\0010\022$\n\025wheel_speed_rr2_valid\030! \001(\010:\005false"
      "\022\032\n\017wheel_speed_rr2\030\" \001(\002:\0010\022N\n\nepb_stat"
      "us\030# \001(\0162&.phoenix.msg.control.Chassis.E"
      "pbStatus:\022EPB_STATUS_INVALID\022E\n\004gear\030$ \001"
      "(\0162).phoenix.msg.control.Chassis.GearPos"
      "ition:\014GEAR_INVALID\022\026\n\013gear_number\030% \001(\005"
      ":\0010\022p\n\030signal_turning_indicator\030& \001(\01623."
      "phoenix.msg.control.Chassis.SignalTurnin"
      "gIndicator:\031TURNING_INDICATOR_INVALID\022X\n"
      "\020signal_turn_lamp\030\' \001(\0162+.phoenix.msg.co"
      "ntrol.Chassis.SignalTurnLamp:\021TURN_LAMP_"
      "INVALID\022P\n\021signal_brake_lamp\030( \001(\0162\'.pho"
      "enix.msg.control.Chassis.SignalLamp:\014LAM"
      "P_INVALID\022\034\n\021brake_pedal_value\030) \001(\005:\0010\022"
      "\032\n\017acc_pedal_value\030* \001(\005:\0010\022!\n\022engine_sp"
      "eed_valid\030+ \001(\010:\005false\022\027\n\014engine_speed\030,"
      " \001(\002:\0010\022\"\n\023engine_torque_valid\030- \001(\010:\005fa"
      "lse\022\030\n\rengine_torque\030. \001(\002:\0010\"Z\n\013Driving"
      "Mode\022\030\n\024DRIVING_MODE_INVALID\020\000\022\027\n\023DRIVIN"
      "G_MODE_MANUAL\020\001\022\030\n\024DRIVING_MODE_ROBOTIC\020"
      "\002\":\n\005EStop\022\022\n\016E_STOP_INVALID\020\000\022\016\n\nE_STOP"
      "_OFF\020\001\022\r\n\tE_STOP_ON\020\002\"\211\001\n\tEpsStatus\022\026\n\022E"
      "PS_STATUS_INVALID\020\000\022\025\n\021EPS_STATUS_MANUAL"
      "\020\001\022\026\n\022EPS_STATUS_ROBOTIC\020\002\022\037\n\033EPS_STATUS"
      "_MANUAL_INTERRUPT\020\003\022\024\n\020EPS_STATUS_ERROR\020"
      "\004\"\224\001\n\021ThrottleSysStatus\022\037\n\033THROTTLE_SYS_"
      "STATUS_INVALID\020\000\022\036\n\032THROTTLE_SYS_STATUS_"
      "MANUAL\020\001\022\037\n\033THROTTLE_SYS_STATUS_ROBOTIC\020"
      "\002\022\035\n\031THROTTLE_SYS_STATUS_ERROR\020\003\"h\n\tEbsS"
      "tatus\022\026\n\022EBS_STATUS_INVALID\020\000\022\025\n\021EBS_STA"
      "TUS_MANUAL\020\001\022\026\n\022EBS_STATUS_ROBOTIC\020\002\022\024\n\020"
      "EBS_STATUS_ERROR\020\003\"P\n\014GearPosition\022\020\n\014GE"
      "AR_INVALID\020\000\022\n\n\006GEAR_P\020\001\022\n\n\006GEAR_N\020\002\022\n\n\006"
      "GEAR_R\020\003\022\n\n\006GEAR_D\020\004\"9\n\nSignalLamp\022\020\n\014LA"
      "MP_INVALID\020\000\022\014\n\010LAMP_OFF\020\001\022\013\n\007LAMP_ON\020\002\""
      "|\n\016SignalTurnLamp\022\025\n\021TURN_LAMP_INVALID\020\000"
      "\022\021\n\rTURN_LAMP_OFF\020\001\022\022\n\016TURN_LAMP_LEFT\020\002\022"
      "\023\n\017TURN_LAMP_RIGHT\020\003\022\027\n\023TURN_LAMP_EMERGE"
      "NCY\020\004\"\214\001\n\026SignalTurningIndicator\022\035\n\031TURN"
      "ING_INDICATOR_INVALID\020\000\022\032\n\026TURNING_INDIC"
      "ATOR_NONE\020\001\022\032\n\026TURNING_INDICATOR_LEFT\020\002\022"
      "\033\n\027TURNING_INDICATOR_RIGHT\020\003\"J\n\tEpbStatu"
      "s\022\026\n\022EPB_STATUS_INVALID\020\000\022\022\n\016EPB_STATUS_"
      "OFF\020\001\022\021\n\rEPB_STATUS_ON\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chassis.proto", &protobuf_RegisterTypes);
  ::protobuf_header_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chassis_2eproto
namespace phoenix {
namespace msg {
namespace control {
const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::DRIVING_MODE_INVALID;
const Chassis_DrivingMode Chassis::DRIVING_MODE_MANUAL;
const Chassis_DrivingMode Chassis::DRIVING_MODE_ROBOTIC;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_EStop_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[1];
}
bool Chassis_EStop_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_EStop Chassis::E_STOP_INVALID;
const Chassis_EStop Chassis::E_STOP_OFF;
const Chassis_EStop Chassis::E_STOP_ON;
const Chassis_EStop Chassis::EStop_MIN;
const Chassis_EStop Chassis::EStop_MAX;
const int Chassis::EStop_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_EpsStatus_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[2];
}
bool Chassis_EpsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_EpsStatus Chassis::EPS_STATUS_INVALID;
const Chassis_EpsStatus Chassis::EPS_STATUS_MANUAL;
const Chassis_EpsStatus Chassis::EPS_STATUS_ROBOTIC;
const Chassis_EpsStatus Chassis::EPS_STATUS_MANUAL_INTERRUPT;
const Chassis_EpsStatus Chassis::EPS_STATUS_ERROR;
const Chassis_EpsStatus Chassis::EpsStatus_MIN;
const Chassis_EpsStatus Chassis::EpsStatus_MAX;
const int Chassis::EpsStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_ThrottleSysStatus_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[3];
}
bool Chassis_ThrottleSysStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_INVALID;
const Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_MANUAL;
const Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_ROBOTIC;
const Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_ERROR;
const Chassis_ThrottleSysStatus Chassis::ThrottleSysStatus_MIN;
const Chassis_ThrottleSysStatus Chassis::ThrottleSysStatus_MAX;
const int Chassis::ThrottleSysStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_EbsStatus_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[4];
}
bool Chassis_EbsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_EbsStatus Chassis::EBS_STATUS_INVALID;
const Chassis_EbsStatus Chassis::EBS_STATUS_MANUAL;
const Chassis_EbsStatus Chassis::EBS_STATUS_ROBOTIC;
const Chassis_EbsStatus Chassis::EBS_STATUS_ERROR;
const Chassis_EbsStatus Chassis::EbsStatus_MIN;
const Chassis_EbsStatus Chassis::EbsStatus_MAX;
const int Chassis::EbsStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[5];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_P;
const Chassis_GearPosition Chassis::GEAR_N;
const Chassis_GearPosition Chassis::GEAR_R;
const Chassis_GearPosition Chassis::GEAR_D;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_SignalLamp_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[6];
}
bool Chassis_SignalLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_SignalLamp Chassis::LAMP_INVALID;
const Chassis_SignalLamp Chassis::LAMP_OFF;
const Chassis_SignalLamp Chassis::LAMP_ON;
const Chassis_SignalLamp Chassis::SignalLamp_MIN;
const Chassis_SignalLamp Chassis::SignalLamp_MAX;
const int Chassis::SignalLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_SignalTurnLamp_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[7];
}
bool Chassis_SignalTurnLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_SignalTurnLamp Chassis::TURN_LAMP_INVALID;
const Chassis_SignalTurnLamp Chassis::TURN_LAMP_OFF;
const Chassis_SignalTurnLamp Chassis::TURN_LAMP_LEFT;
const Chassis_SignalTurnLamp Chassis::TURN_LAMP_RIGHT;
const Chassis_SignalTurnLamp Chassis::TURN_LAMP_EMERGENCY;
const Chassis_SignalTurnLamp Chassis::SignalTurnLamp_MIN;
const Chassis_SignalTurnLamp Chassis::SignalTurnLamp_MAX;
const int Chassis::SignalTurnLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_SignalTurningIndicator_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[8];
}
bool Chassis_SignalTurningIndicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_INVALID;
const Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_NONE;
const Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_LEFT;
const Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_RIGHT;
const Chassis_SignalTurningIndicator Chassis::SignalTurningIndicator_MIN;
const Chassis_SignalTurningIndicator Chassis::SignalTurningIndicator_MAX;
const int Chassis::SignalTurningIndicator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_EpbStatus_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[9];
}
bool Chassis_EpbStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_EpbStatus Chassis::EPB_STATUS_INVALID;
const Chassis_EpbStatus Chassis::EPB_STATUS_OFF;
const Chassis_EpbStatus Chassis::EPB_STATUS_ON;
const Chassis_EpbStatus Chassis::EpbStatus_MIN;
const Chassis_EpbStatus Chassis::EpbStatus_MAX;
const int Chassis::EpbStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Chassis::InitAsDefaultInstance() {
  ::phoenix::msg::control::_Chassis_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
void Chassis::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kHeaderFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kEStopFieldNumber;
const int Chassis::kEpsStatusFieldNumber;
const int Chassis::kThrottleSysStatusFieldNumber;
const int Chassis::kEbsStatusFieldNumber;
const int Chassis::kSteeringWheelAngleValidFieldNumber;
const int Chassis::kSteeringWheelAngleFieldNumber;
const int Chassis::kSteeringWheelSpeedValidFieldNumber;
const int Chassis::kSteeringWheelSpeedFieldNumber;
const int Chassis::kSteeringWheelTorqueValidFieldNumber;
const int Chassis::kSteeringWheelTorqueFieldNumber;
const int Chassis::kVelocityValidFieldNumber;
const int Chassis::kVelocityFieldNumber;
const int Chassis::kAccelerationValidFieldNumber;
const int Chassis::kAccelerationFieldNumber;
const int Chassis::kYawRateValidFieldNumber;
const int Chassis::kYawRateFieldNumber;
const int Chassis::kAxValidFieldNumber;
const int Chassis::kAxFieldNumber;
const int Chassis::kAyValidFieldNumber;
const int Chassis::kAyFieldNumber;
const int Chassis::kWheelSpeedFlValidFieldNumber;
const int Chassis::kWheelSpeedFlFieldNumber;
const int Chassis::kWheelSpeedFrValidFieldNumber;
const int Chassis::kWheelSpeedFrFieldNumber;
const int Chassis::kWheelSpeedRlValidFieldNumber;
const int Chassis::kWheelSpeedRlFieldNumber;
const int Chassis::kWheelSpeedRrValidFieldNumber;
const int Chassis::kWheelSpeedRrFieldNumber;
const int Chassis::kWheelSpeedRl2ValidFieldNumber;
const int Chassis::kWheelSpeedRl2FieldNumber;
const int Chassis::kWheelSpeedRr2ValidFieldNumber;
const int Chassis::kWheelSpeedRr2FieldNumber;
const int Chassis::kEpbStatusFieldNumber;
const int Chassis::kGearFieldNumber;
const int Chassis::kGearNumberFieldNumber;
const int Chassis::kSignalTurningIndicatorFieldNumber;
const int Chassis::kSignalTurnLampFieldNumber;
const int Chassis::kSignalBrakeLampFieldNumber;
const int Chassis::kBrakePedalValueFieldNumber;
const int Chassis::kAccPedalValueFieldNumber;
const int Chassis::kEngineSpeedValidFieldNumber;
const int Chassis::kEngineSpeedFieldNumber;
const int Chassis::kEngineTorqueValidFieldNumber;
const int Chassis::kEngineTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chassis_2eproto::InitDefaultsChassis();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.control.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&driving_mode_, &from.driving_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_torque_) -
    reinterpret_cast<char*>(&driving_mode_)) + sizeof(engine_torque_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.control.Chassis)
}

void Chassis::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_torque_) -
      reinterpret_cast<char*>(&header_)) + sizeof(engine_torque_));
  _cached_size_ = 0;
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:phoenix.msg.control.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chassis::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chassis& Chassis::default_instance() {
  ::protobuf_chassis_2eproto::InitDefaultsChassis();
  return *internal_default_instance();
}

Chassis* Chassis::New(::google::protobuf::Arena* arena) const {
  Chassis* n = new Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.control.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&driving_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_wheel_speed_) -
        reinterpret_cast<char*>(&driving_mode_)) + sizeof(steering_wheel_speed_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&steering_wheel_angle_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_rate_) -
        reinterpret_cast<char*>(&steering_wheel_angle_valid_)) + sizeof(yaw_rate_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&acceleration_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_speed_fr_) -
        reinterpret_cast<char*>(&acceleration_valid_)) + sizeof(wheel_speed_fr_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&wheel_speed_fl_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_speed_rr2_) -
        reinterpret_cast<char*>(&wheel_speed_fl_valid_)) + sizeof(wheel_speed_rr2_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&epb_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_torque_valid_) -
        reinterpret_cast<char*>(&epb_status_)) + sizeof(engine_torque_valid_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&signal_turn_lamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_torque_) -
        reinterpret_cast<char*>(&signal_turn_lamp_)) + sizeof(engine_torque_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.control.Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::phoenix::msg::control::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EStop_IsValid(value)) {
            set_e_stop(static_cast< ::phoenix::msg::control::Chassis_EStop >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EpsStatus_IsValid(value)) {
            set_eps_status(static_cast< ::phoenix::msg::control::Chassis_EpsStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_ThrottleSysStatus_IsValid(value)) {
            set_throttle_sys_status(static_cast< ::phoenix::msg::control::Chassis_ThrottleSysStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EbsStatus_IsValid(value)) {
            set_ebs_status(static_cast< ::phoenix::msg::control::Chassis_EbsStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_wheel_angle_valid = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_steering_wheel_angle_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_wheel_angle_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_angle = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_steering_wheel_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_wheel_speed_valid = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_steering_wheel_speed_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_wheel_speed_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_speed = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_steering_wheel_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_wheel_torque_valid = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_steering_wheel_torque_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_wheel_torque_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_torque = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_steering_wheel_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool velocity_valid = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_velocity_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velocity_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float velocity = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acceleration_valid = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_acceleration_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceleration_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yaw_rate_valid = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_yaw_rate_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yaw_rate_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_rate = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_yaw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ax_valid = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_ax_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ax_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ax = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_ax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ay_valid = 21 [default = false];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_ay_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ay = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_ay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_fl_valid = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_wheel_speed_fl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_fl = 24 [default = 0];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          set_has_wheel_speed_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_fr_valid = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_wheel_speed_fr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_fr = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_wheel_speed_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rl_valid = 27 [default = false];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_wheel_speed_rl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rl = 28 [default = 0];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {
          set_has_wheel_speed_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rr_valid = 29 [default = false];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_wheel_speed_rr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rr = 30 [default = 0];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
          set_has_wheel_speed_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rl2_valid = 31 [default = false];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_wheel_speed_rl2_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rl2_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rl2 = 32 [default = 0];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {
          set_has_wheel_speed_rl2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rl2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rr2_valid = 33 [default = false];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_wheel_speed_rr2_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rr2_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rr2 = 34 [default = 0];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {
          set_has_wheel_speed_rr2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rr2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EpbStatus_IsValid(value)) {
            set_epb_status(static_cast< ::phoenix::msg::control::Chassis_EpbStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                35, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                36, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gear_number = 37 [default = 0];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_gear_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalTurningIndicator_IsValid(value)) {
            set_signal_turning_indicator(static_cast< ::phoenix::msg::control::Chassis_SignalTurningIndicator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                38, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value)) {
            set_signal_turn_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                39, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalLamp_IsValid(value)) {
            set_signal_brake_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 brake_pedal_value = 41 [default = 0];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_brake_pedal_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_pedal_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acc_pedal_value = 42 [default = 0];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_acc_pedal_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acc_pedal_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool engine_speed_valid = 43 [default = false];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_engine_speed_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_speed_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_speed = 44 [default = 0];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 357 & 0xFF */)) {
          set_has_engine_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool engine_torque_valid = 45 [default = false];
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_engine_torque_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_torque_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_torque = 46 [default = 0];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 373 & 0xFF */)) {
          set_has_engine_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.control.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.control.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.control.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->driving_mode(), output);
  }

  // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->e_stop(), output);
  }

  // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eps_status(), output);
  }

  // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->throttle_sys_status(), output);
  }

  // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ebs_status(), output);
  }

  // optional bool steering_wheel_angle_valid = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->steering_wheel_angle_valid(), output);
  }

  // optional float steering_wheel_angle = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->steering_wheel_angle(), output);
  }

  // optional bool steering_wheel_speed_valid = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->steering_wheel_speed_valid(), output);
  }

  // optional float steering_wheel_speed = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->steering_wheel_speed(), output);
  }

  // optional bool steering_wheel_torque_valid = 11 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->steering_wheel_torque_valid(), output);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_wheel_torque(), output);
  }

  // optional bool velocity_valid = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->velocity_valid(), output);
  }

  // optional float velocity = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->velocity(), output);
  }

  // optional bool acceleration_valid = 15 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->acceleration_valid(), output);
  }

  // optional float acceleration = 16 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->acceleration(), output);
  }

  // optional bool yaw_rate_valid = 17 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->yaw_rate_valid(), output);
  }

  // optional float yaw_rate = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->yaw_rate(), output);
  }

  // optional bool ax_valid = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->ax_valid(), output);
  }

  // optional float ax = 20 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->ax(), output);
  }

  // optional bool ay_valid = 21 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->ay_valid(), output);
  }

  // optional float ay = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->ay(), output);
  }

  // optional bool wheel_speed_fl_valid = 23 [default = false];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->wheel_speed_fl_valid(), output);
  }

  // optional float wheel_speed_fl = 24 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->wheel_speed_fl(), output);
  }

  // optional bool wheel_speed_fr_valid = 25 [default = false];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->wheel_speed_fr_valid(), output);
  }

  // optional float wheel_speed_fr = 26 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->wheel_speed_fr(), output);
  }

  // optional bool wheel_speed_rl_valid = 27 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->wheel_speed_rl_valid(), output);
  }

  // optional float wheel_speed_rl = 28 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->wheel_speed_rl(), output);
  }

  // optional bool wheel_speed_rr_valid = 29 [default = false];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->wheel_speed_rr_valid(), output);
  }

  // optional float wheel_speed_rr = 30 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->wheel_speed_rr(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rl2_valid = 31 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->wheel_speed_rl2_valid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rl2 = 32 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->wheel_speed_rl2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rr2_valid = 33 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->wheel_speed_rr2_valid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rr2 = 34 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->wheel_speed_rr2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->epb_status(), output);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->gear(), output);
  }

  // optional int32 gear_number = 37 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->gear_number(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->signal_turning_indicator(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->signal_turn_lamp(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->signal_brake_lamp(), output);
  }

  // optional int32 brake_pedal_value = 41 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->brake_pedal_value(), output);
  }

  // optional int32 acc_pedal_value = 42 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->acc_pedal_value(), output);
  }

  // optional bool engine_speed_valid = 43 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->engine_speed_valid(), output);
  }

  // optional float engine_speed = 44 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->engine_speed(), output);
  }

  // optional bool engine_torque_valid = 45 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->engine_torque_valid(), output);
  }

  // optional float engine_torque = 46 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->engine_torque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.control.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.control.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->driving_mode(), target);
  }

  // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->e_stop(), target);
  }

  // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->eps_status(), target);
  }

  // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->throttle_sys_status(), target);
  }

  // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ebs_status(), target);
  }

  // optional bool steering_wheel_angle_valid = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->steering_wheel_angle_valid(), target);
  }

  // optional float steering_wheel_angle = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->steering_wheel_angle(), target);
  }

  // optional bool steering_wheel_speed_valid = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->steering_wheel_speed_valid(), target);
  }

  // optional float steering_wheel_speed = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->steering_wheel_speed(), target);
  }

  // optional bool steering_wheel_torque_valid = 11 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->steering_wheel_torque_valid(), target);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_wheel_torque(), target);
  }

  // optional bool velocity_valid = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->velocity_valid(), target);
  }

  // optional float velocity = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->velocity(), target);
  }

  // optional bool acceleration_valid = 15 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->acceleration_valid(), target);
  }

  // optional float acceleration = 16 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->acceleration(), target);
  }

  // optional bool yaw_rate_valid = 17 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->yaw_rate_valid(), target);
  }

  // optional float yaw_rate = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->yaw_rate(), target);
  }

  // optional bool ax_valid = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->ax_valid(), target);
  }

  // optional float ax = 20 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->ax(), target);
  }

  // optional bool ay_valid = 21 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->ay_valid(), target);
  }

  // optional float ay = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->ay(), target);
  }

  // optional bool wheel_speed_fl_valid = 23 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->wheel_speed_fl_valid(), target);
  }

  // optional float wheel_speed_fl = 24 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->wheel_speed_fl(), target);
  }

  // optional bool wheel_speed_fr_valid = 25 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->wheel_speed_fr_valid(), target);
  }

  // optional float wheel_speed_fr = 26 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->wheel_speed_fr(), target);
  }

  // optional bool wheel_speed_rl_valid = 27 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->wheel_speed_rl_valid(), target);
  }

  // optional float wheel_speed_rl = 28 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->wheel_speed_rl(), target);
  }

  // optional bool wheel_speed_rr_valid = 29 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->wheel_speed_rr_valid(), target);
  }

  // optional float wheel_speed_rr = 30 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->wheel_speed_rr(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rl2_valid = 31 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->wheel_speed_rl2_valid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rl2 = 32 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->wheel_speed_rl2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rr2_valid = 33 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->wheel_speed_rr2_valid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rr2 = 34 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->wheel_speed_rr2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->epb_status(), target);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->gear(), target);
  }

  // optional int32 gear_number = 37 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->gear_number(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->signal_turning_indicator(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->signal_turn_lamp(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->signal_brake_lamp(), target);
  }

  // optional int32 brake_pedal_value = 41 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->brake_pedal_value(), target);
  }

  // optional int32 acc_pedal_value = 42 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->acc_pedal_value(), target);
  }

  // optional bool engine_speed_valid = 43 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->engine_speed_valid(), target);
  }

  // optional float engine_speed = 44 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->engine_speed(), target);
  }

  // optional bool engine_torque_valid = 45 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->engine_torque_valid(), target);
  }

  // optional float engine_torque = 46 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->engine_torque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.control.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.control.Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->header_);
    }

    // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
    if (has_e_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->e_stop());
    }

    // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
    if (has_eps_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_status());
    }

    // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
    if (has_throttle_sys_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->throttle_sys_status());
    }

    // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
    if (has_ebs_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ebs_status());
    }

    // optional float steering_wheel_angle = 8 [default = 0];
    if (has_steering_wheel_angle()) {
      total_size += 1 + 4;
    }

    // optional float steering_wheel_speed = 10 [default = 0];
    if (has_steering_wheel_speed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool steering_wheel_angle_valid = 7 [default = false];
    if (has_steering_wheel_angle_valid()) {
      total_size += 1 + 1;
    }

    // optional bool steering_wheel_speed_valid = 9 [default = false];
    if (has_steering_wheel_speed_valid()) {
      total_size += 1 + 1;
    }

    // optional bool steering_wheel_torque_valid = 11 [default = false];
    if (has_steering_wheel_torque_valid()) {
      total_size += 1 + 1;
    }

    // optional bool velocity_valid = 13 [default = false];
    if (has_velocity_valid()) {
      total_size += 1 + 1;
    }

    // optional float steering_wheel_torque = 12 [default = 0];
    if (has_steering_wheel_torque()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 14 [default = 0];
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 16 [default = 0];
    if (has_acceleration()) {
      total_size += 2 + 4;
    }

    // optional float yaw_rate = 18 [default = 0];
    if (has_yaw_rate()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool acceleration_valid = 15 [default = false];
    if (has_acceleration_valid()) {
      total_size += 1 + 1;
    }

    // optional bool yaw_rate_valid = 17 [default = false];
    if (has_yaw_rate_valid()) {
      total_size += 2 + 1;
    }

    // optional bool ax_valid = 19 [default = false];
    if (has_ax_valid()) {
      total_size += 2 + 1;
    }

    // optional bool ay_valid = 21 [default = false];
    if (has_ay_valid()) {
      total_size += 2 + 1;
    }

    // optional float ax = 20 [default = 0];
    if (has_ax()) {
      total_size += 2 + 4;
    }

    // optional float ay = 22 [default = 0];
    if (has_ay()) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_fl = 24 [default = 0];
    if (has_wheel_speed_fl()) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_fr = 26 [default = 0];
    if (has_wheel_speed_fr()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool wheel_speed_fl_valid = 23 [default = false];
    if (has_wheel_speed_fl_valid()) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_fr_valid = 25 [default = false];
    if (has_wheel_speed_fr_valid()) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_rl_valid = 27 [default = false];
    if (has_wheel_speed_rl_valid()) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_rr_valid = 29 [default = false];
    if (has_wheel_speed_rr_valid()) {
      total_size += 2 + 1;
    }

    // optional float wheel_speed_rl = 28 [default = 0];
    if (has_wheel_speed_rl()) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_rr = 30 [default = 0];
    if (has_wheel_speed_rr()) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_rl2 = 32 [default = 0];
    if (has_wheel_speed_rl2()) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_rr2 = 34 [default = 0];
    if (has_wheel_speed_rr2()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
    if (has_epb_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epb_status());
    }

    // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
    if (has_gear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional int32 gear_number = 37 [default = 0];
    if (has_gear_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear_number());
    }

    // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
    if (has_signal_turning_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal_turning_indicator());
    }

    // optional bool wheel_speed_rl2_valid = 31 [default = false];
    if (has_wheel_speed_rl2_valid()) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_rr2_valid = 33 [default = false];
    if (has_wheel_speed_rr2_valid()) {
      total_size += 2 + 1;
    }

    // optional bool engine_speed_valid = 43 [default = false];
    if (has_engine_speed_valid()) {
      total_size += 2 + 1;
    }

    // optional bool engine_torque_valid = 45 [default = false];
    if (has_engine_torque_valid()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 16128u) {
    // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
    if (has_signal_turn_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal_turn_lamp());
    }

    // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
    if (has_signal_brake_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal_brake_lamp());
    }

    // optional int32 brake_pedal_value = 41 [default = 0];
    if (has_brake_pedal_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brake_pedal_value());
    }

    // optional int32 acc_pedal_value = 42 [default = 0];
    if (has_acc_pedal_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acc_pedal_value());
    }

    // optional float engine_speed = 44 [default = 0];
    if (has_engine_speed()) {
      total_size += 2 + 4;
    }

    // optional float engine_torque = 46 [default = 0];
    if (has_engine_torque()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.control.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.control.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.control.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.control.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      e_stop_ = from.e_stop_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_status_ = from.eps_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_sys_status_ = from.throttle_sys_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      ebs_status_ = from.ebs_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      steering_wheel_angle_ = from.steering_wheel_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      steering_wheel_speed_ = from.steering_wheel_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      steering_wheel_angle_valid_ = from.steering_wheel_angle_valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      steering_wheel_speed_valid_ = from.steering_wheel_speed_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_wheel_torque_valid_ = from.steering_wheel_torque_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      velocity_valid_ = from.velocity_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      steering_wheel_torque_ = from.steering_wheel_torque_;
    }
    if (cached_has_bits & 0x00002000u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00004000u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      acceleration_valid_ = from.acceleration_valid_;
    }
    if (cached_has_bits & 0x00020000u) {
      yaw_rate_valid_ = from.yaw_rate_valid_;
    }
    if (cached_has_bits & 0x00040000u) {
      ax_valid_ = from.ax_valid_;
    }
    if (cached_has_bits & 0x00080000u) {
      ay_valid_ = from.ay_valid_;
    }
    if (cached_has_bits & 0x00100000u) {
      ax_ = from.ax_;
    }
    if (cached_has_bits & 0x00200000u) {
      ay_ = from.ay_;
    }
    if (cached_has_bits & 0x00400000u) {
      wheel_speed_fl_ = from.wheel_speed_fl_;
    }
    if (cached_has_bits & 0x00800000u) {
      wheel_speed_fr_ = from.wheel_speed_fr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      wheel_speed_fl_valid_ = from.wheel_speed_fl_valid_;
    }
    if (cached_has_bits & 0x02000000u) {
      wheel_speed_fr_valid_ = from.wheel_speed_fr_valid_;
    }
    if (cached_has_bits & 0x04000000u) {
      wheel_speed_rl_valid_ = from.wheel_speed_rl_valid_;
    }
    if (cached_has_bits & 0x08000000u) {
      wheel_speed_rr_valid_ = from.wheel_speed_rr_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      wheel_speed_rl_ = from.wheel_speed_rl_;
    }
    if (cached_has_bits & 0x20000000u) {
      wheel_speed_rr_ = from.wheel_speed_rr_;
    }
    if (cached_has_bits & 0x40000000u) {
      wheel_speed_rl2_ = from.wheel_speed_rl2_;
    }
    if (cached_has_bits & 0x80000000u) {
      wheel_speed_rr2_ = from.wheel_speed_rr2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      epb_status_ = from.epb_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_number_ = from.gear_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      signal_turning_indicator_ = from.signal_turning_indicator_;
    }
    if (cached_has_bits & 0x00000010u) {
      wheel_speed_rl2_valid_ = from.wheel_speed_rl2_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheel_speed_rr2_valid_ = from.wheel_speed_rr2_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      engine_speed_valid_ = from.engine_speed_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      engine_torque_valid_ = from.engine_torque_valid_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      signal_turn_lamp_ = from.signal_turn_lamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      signal_brake_lamp_ = from.signal_brake_lamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_pedal_value_ = from.brake_pedal_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_pedal_value_ = from.acc_pedal_value_;
    }
    if (cached_has_bits & 0x00001000u) {
      engine_speed_ = from.engine_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      engine_torque_ = from.engine_torque_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.control.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.control.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(driving_mode_, other->driving_mode_);
  swap(e_stop_, other->e_stop_);
  swap(eps_status_, other->eps_status_);
  swap(throttle_sys_status_, other->throttle_sys_status_);
  swap(ebs_status_, other->ebs_status_);
  swap(steering_wheel_angle_, other->steering_wheel_angle_);
  swap(steering_wheel_speed_, other->steering_wheel_speed_);
  swap(steering_wheel_angle_valid_, other->steering_wheel_angle_valid_);
  swap(steering_wheel_speed_valid_, other->steering_wheel_speed_valid_);
  swap(steering_wheel_torque_valid_, other->steering_wheel_torque_valid_);
  swap(velocity_valid_, other->velocity_valid_);
  swap(steering_wheel_torque_, other->steering_wheel_torque_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(acceleration_valid_, other->acceleration_valid_);
  swap(yaw_rate_valid_, other->yaw_rate_valid_);
  swap(ax_valid_, other->ax_valid_);
  swap(ay_valid_, other->ay_valid_);
  swap(ax_, other->ax_);
  swap(ay_, other->ay_);
  swap(wheel_speed_fl_, other->wheel_speed_fl_);
  swap(wheel_speed_fr_, other->wheel_speed_fr_);
  swap(wheel_speed_fl_valid_, other->wheel_speed_fl_valid_);
  swap(wheel_speed_fr_valid_, other->wheel_speed_fr_valid_);
  swap(wheel_speed_rl_valid_, other->wheel_speed_rl_valid_);
  swap(wheel_speed_rr_valid_, other->wheel_speed_rr_valid_);
  swap(wheel_speed_rl_, other->wheel_speed_rl_);
  swap(wheel_speed_rr_, other->wheel_speed_rr_);
  swap(wheel_speed_rl2_, other->wheel_speed_rl2_);
  swap(wheel_speed_rr2_, other->wheel_speed_rr2_);
  swap(epb_status_, other->epb_status_);
  swap(gear_, other->gear_);
  swap(gear_number_, other->gear_number_);
  swap(signal_turning_indicator_, other->signal_turning_indicator_);
  swap(wheel_speed_rl2_valid_, other->wheel_speed_rl2_valid_);
  swap(wheel_speed_rr2_valid_, other->wheel_speed_rr2_valid_);
  swap(engine_speed_valid_, other->engine_speed_valid_);
  swap(engine_torque_valid_, other->engine_torque_valid_);
  swap(signal_turn_lamp_, other->signal_turn_lamp_);
  swap(signal_brake_lamp_, other->signal_brake_lamp_);
  swap(brake_pedal_value_, other->brake_pedal_value_);
  swap(acc_pedal_value_, other->acc_pedal_value_);
  swap(engine_speed_, other->engine_speed_);
  swap(engine_torque_, other->engine_torque_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)
