// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef PROTOBUF_header_2eproto__INCLUDED
#define PROTOBUF_header_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_header_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHeaderImpl();
void InitDefaultsHeader();
inline void InitDefaults() {
  InitDefaultsHeader();
}
}  // namespace protobuf_header_2eproto
namespace phoenix {
namespace msg {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace common
}  // namespace msg
}  // namespace phoenix
namespace phoenix {
namespace msg {
namespace common {

// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.common.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool valid = 1 [default = false];
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // optional uint32 sequence = 2 [default = 0];
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // optional int64 timestamp = 3 [default = 0];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional uint32 src_module_id = 4 [default = 0];
  bool has_src_module_id() const;
  void clear_src_module_id();
  static const int kSrcModuleIdFieldNumber = 4;
  ::google::protobuf::uint32 src_module_id() const;
  void set_src_module_id(::google::protobuf::uint32 value);

  // optional uint32 dst_module_id = 5 [default = 0];
  bool has_dst_module_id() const;
  void clear_dst_module_id();
  static const int kDstModuleIdFieldNumber = 5;
  ::google::protobuf::uint32 dst_module_id() const;
  void set_dst_module_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.common.Header)
 private:
  void set_has_valid();
  void clear_has_valid();
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_src_module_id();
  void clear_has_src_module_id();
  void set_has_dst_module_id();
  void clear_has_dst_module_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool valid_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint32 src_module_id_;
  ::google::protobuf::uint32 dst_module_id_;
  friend struct ::protobuf_header_2eproto::TableStruct;
  friend void ::protobuf_header_2eproto::InitDefaultsHeaderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// optional bool valid = 1 [default = false];
inline bool Header::has_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_valid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool Header::valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.common.Header.valid)
  return valid_;
}
inline void Header::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.common.Header.valid)
}

// optional uint32 sequence = 2 [default = 0];
inline bool Header::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Header::sequence() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.common.Header.sequence)
  return sequence_;
}
inline void Header::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.common.Header.sequence)
}

// optional int64 timestamp = 3 [default = 0];
inline bool Header::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Header::timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.common.Header.timestamp)
  return timestamp_;
}
inline void Header::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.common.Header.timestamp)
}

// optional uint32 src_module_id = 4 [default = 0];
inline bool Header::has_src_module_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_src_module_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_src_module_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_src_module_id() {
  src_module_id_ = 0u;
  clear_has_src_module_id();
}
inline ::google::protobuf::uint32 Header::src_module_id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.common.Header.src_module_id)
  return src_module_id_;
}
inline void Header::set_src_module_id(::google::protobuf::uint32 value) {
  set_has_src_module_id();
  src_module_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.common.Header.src_module_id)
}

// optional uint32 dst_module_id = 5 [default = 0];
inline bool Header::has_dst_module_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_dst_module_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_dst_module_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_dst_module_id() {
  dst_module_id_ = 0u;
  clear_has_dst_module_id();
}
inline ::google::protobuf::uint32 Header::dst_module_id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.common.Header.dst_module_id)
  return dst_module_id_;
}
inline void Header::set_dst_module_id(::google::protobuf::uint32 value) {
  set_has_dst_module_id();
  dst_module_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.common.Header.dst_module_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_header_2eproto__INCLUDED
