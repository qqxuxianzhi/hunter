// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_ctl_cmd.proto

#include "chassis_ctl_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace phoenix {
namespace msg {
namespace control {
class ChassisCtlCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChassisCtlCmd>
      _instance;
} _ChassisCtlCmd_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
namespace protobuf_chassis_5fctl_5fcmd_2eproto {
void InitDefaultsChassisCtlCmdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_header_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::phoenix::msg::control::_ChassisCtlCmd_default_instance_;
    new (ptr) ::phoenix::msg::control::ChassisCtlCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::control::ChassisCtlCmd::InitAsDefaultInstance();
}

void InitDefaultsChassisCtlCmd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChassisCtlCmdImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, start_robotic_ctl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_throttle_sys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_ebs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_remote_ctl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_direct_ctl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, release_throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, steering_wheel_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, steering_wheel_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, steering_wheel_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, acc_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, brake_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, turn_lamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, brake_lamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, epb_status_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::phoenix::msg::control::ChassisCtlCmd)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::phoenix::msg::control::_ChassisCtlCmd_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "chassis_ctl_cmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025chassis_ctl_cmd.proto\022\023phoenix.msg.con"
      "trol\032\014header.proto\"\272\013\n\rChassisCtlCmd\022*\n\006"
      "header\030\001 \001(\0132\032.phoenix.msg.common.Header"
      "\022\034\n\021start_robotic_ctl\030\002 \001(\005:\0010\022\031\n\nenable"
      "_eps\030\003 \001(\010:\005false\022\"\n\023enable_throttle_sys"
      "\030\004 \001(\010:\005false\022\031\n\nenable_ebs\030\005 \001(\010:\005false"
      "\022 \n\021enable_remote_ctl\030\006 \001(\010:\005false\022 \n\021en"
      "able_direct_ctl\030\007 \001(\010:\005false\022\031\n\nenable_a"
      "cc\030\010 \001(\010:\005false\022\037\n\020release_throttle\030\t \001("
      "\010:\005false\022\037\n\024steering_wheel_angle\030\n \001(\002:\001"
      "0\022\037\n\024steering_wheel_speed\030\013 \001(\002:\0010\022 \n\025st"
      "eering_wheel_torque\030\014 \001(\002:\0010\022\023\n\010velocity"
      "\030\r \001(\002:\0010\022\027\n\014acceleration\030\016 \001(\002:\0010\022\024\n\tac"
      "c_value\030\017 \001(\002:\0010\022\026\n\013brake_value\030\020 \001(\002:\0010"
      "\022K\n\004gear\030\021 \001(\0162/.phoenix.msg.control.Cha"
      "ssisCtlCmd.GearPosition:\014GEAR_INVALID\022W\n"
      "\tturn_lamp\030\022 \001(\01621.phoenix.msg.control.C"
      "hassisCtlCmd.SignalTurnLamp:\021TURN_LAMP_I"
      "NVALID\022O\n\nbrake_lamp\030\023 \001(\0162-.phoenix.msg"
      ".control.ChassisCtlCmd.SignalLamp:\014LAMP_"
      "INVALID\022L\n\005wiper\030\024 \001(\0162..phoenix.msg.con"
      "trol.ChassisCtlCmd.WiperStatus:\rWIPER_IN"
      "VALID\022T\n\nepb_status\030\025 \001(\0162,.phoenix.msg."
      "control.ChassisCtlCmd.EpbStatus:\022EPB_STA"
      "TUS_INVALID\"P\n\014GearPosition\022\020\n\014GEAR_INVA"
      "LID\020\000\022\n\n\006GEAR_P\020\001\022\n\n\006GEAR_N\020\002\022\n\n\006GEAR_R\020"
      "\003\022\n\n\006GEAR_D\020\004\"9\n\nSignalLamp\022\020\n\014LAMP_INVA"
      "LID\020\000\022\014\n\010LAMP_OFF\020\001\022\013\n\007LAMP_ON\020\002\"|\n\016Sign"
      "alTurnLamp\022\025\n\021TURN_LAMP_INVALID\020\000\022\021\n\rTUR"
      "N_LAMP_OFF\020\001\022\022\n\016TURN_LAMP_LEFT\020\002\022\023\n\017TURN"
      "_LAMP_RIGHT\020\003\022\027\n\023TURN_LAMP_EMERGENCY\020\004\"J"
      "\n\tEpbStatus\022\026\n\022EPB_STATUS_INVALID\020\000\022\022\n\016E"
      "PB_STATUS_OFF\020\001\022\021\n\rEPB_STATUS_ON\020\002\"\322\001\n\013W"
      "iperStatus\022\021\n\rWIPER_INVALID\020\000\022\r\n\tWIPER_O"
      "FF\020\001\022 \n\034WIPER_SHORT_PRESS_WITH_CLICK\020\002\022\037"
      "\n\033WIPER_LONG_PRESS_WITH_CLICK\020\003\022\017\n\013WIPER"
      "_INT_1\020\004\022\017\n\013WIPER_INT_2\020\005\022\017\n\013WIPER_INT_3"
      "\020\006\022\017\n\013WIPER_INT_4\020\007\022\014\n\010WIPER_LO\020\010\022\014\n\010WIP"
      "ER_HI\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chassis_ctl_cmd.proto", &protobuf_RegisterTypes);
  ::protobuf_header_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chassis_5fctl_5fcmd_2eproto
namespace phoenix {
namespace msg {
namespace control {
const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_GearPosition_descriptor() {
  protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_5fctl_5fcmd_2eproto::file_level_enum_descriptors[0];
}
bool ChassisCtlCmd_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_INVALID;
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_P;
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_N;
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_R;
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_D;
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GearPosition_MIN;
const ChassisCtlCmd_GearPosition ChassisCtlCmd::GearPosition_MAX;
const int ChassisCtlCmd::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_SignalLamp_descriptor() {
  protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_5fctl_5fcmd_2eproto::file_level_enum_descriptors[1];
}
bool ChassisCtlCmd_SignalLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisCtlCmd_SignalLamp ChassisCtlCmd::LAMP_INVALID;
const ChassisCtlCmd_SignalLamp ChassisCtlCmd::LAMP_OFF;
const ChassisCtlCmd_SignalLamp ChassisCtlCmd::LAMP_ON;
const ChassisCtlCmd_SignalLamp ChassisCtlCmd::SignalLamp_MIN;
const ChassisCtlCmd_SignalLamp ChassisCtlCmd::SignalLamp_MAX;
const int ChassisCtlCmd::SignalLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_SignalTurnLamp_descriptor() {
  protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_5fctl_5fcmd_2eproto::file_level_enum_descriptors[2];
}
bool ChassisCtlCmd_SignalTurnLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_INVALID;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_OFF;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_LEFT;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_RIGHT;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_EMERGENCY;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::SignalTurnLamp_MIN;
const ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::SignalTurnLamp_MAX;
const int ChassisCtlCmd::SignalTurnLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_EpbStatus_descriptor() {
  protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_5fctl_5fcmd_2eproto::file_level_enum_descriptors[3];
}
bool ChassisCtlCmd_EpbStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisCtlCmd_EpbStatus ChassisCtlCmd::EPB_STATUS_INVALID;
const ChassisCtlCmd_EpbStatus ChassisCtlCmd::EPB_STATUS_OFF;
const ChassisCtlCmd_EpbStatus ChassisCtlCmd::EPB_STATUS_ON;
const ChassisCtlCmd_EpbStatus ChassisCtlCmd::EpbStatus_MIN;
const ChassisCtlCmd_EpbStatus ChassisCtlCmd::EpbStatus_MAX;
const int ChassisCtlCmd::EpbStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChassisCtlCmd_WiperStatus_descriptor() {
  protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_5fctl_5fcmd_2eproto::file_level_enum_descriptors[4];
}
bool ChassisCtlCmd_WiperStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INVALID;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_OFF;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_SHORT_PRESS_WITH_CLICK;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_LONG_PRESS_WITH_CLICK;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_1;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_2;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_3;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_4;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_LO;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_HI;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WiperStatus_MIN;
const ChassisCtlCmd_WiperStatus ChassisCtlCmd::WiperStatus_MAX;
const int ChassisCtlCmd::WiperStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ChassisCtlCmd::InitAsDefaultInstance() {
  ::phoenix::msg::control::_ChassisCtlCmd_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
void ChassisCtlCmd::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisCtlCmd::kHeaderFieldNumber;
const int ChassisCtlCmd::kStartRoboticCtlFieldNumber;
const int ChassisCtlCmd::kEnableEpsFieldNumber;
const int ChassisCtlCmd::kEnableThrottleSysFieldNumber;
const int ChassisCtlCmd::kEnableEbsFieldNumber;
const int ChassisCtlCmd::kEnableRemoteCtlFieldNumber;
const int ChassisCtlCmd::kEnableDirectCtlFieldNumber;
const int ChassisCtlCmd::kEnableAccFieldNumber;
const int ChassisCtlCmd::kReleaseThrottleFieldNumber;
const int ChassisCtlCmd::kSteeringWheelAngleFieldNumber;
const int ChassisCtlCmd::kSteeringWheelSpeedFieldNumber;
const int ChassisCtlCmd::kSteeringWheelTorqueFieldNumber;
const int ChassisCtlCmd::kVelocityFieldNumber;
const int ChassisCtlCmd::kAccelerationFieldNumber;
const int ChassisCtlCmd::kAccValueFieldNumber;
const int ChassisCtlCmd::kBrakeValueFieldNumber;
const int ChassisCtlCmd::kGearFieldNumber;
const int ChassisCtlCmd::kTurnLampFieldNumber;
const int ChassisCtlCmd::kBrakeLampFieldNumber;
const int ChassisCtlCmd::kWiperFieldNumber;
const int ChassisCtlCmd::kEpbStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisCtlCmd::ChassisCtlCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chassis_5fctl_5fcmd_2eproto::InitDefaultsChassisCtlCmd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.control.ChassisCtlCmd)
}
ChassisCtlCmd::ChassisCtlCmd(const ChassisCtlCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&start_robotic_ctl_, &from.start_robotic_ctl_,
    static_cast<size_t>(reinterpret_cast<char*>(&epb_status_) -
    reinterpret_cast<char*>(&start_robotic_ctl_)) + sizeof(epb_status_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.control.ChassisCtlCmd)
}

void ChassisCtlCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epb_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(epb_status_));
}

ChassisCtlCmd::~ChassisCtlCmd() {
  // @@protoc_insertion_point(destructor:phoenix.msg.control.ChassisCtlCmd)
  SharedDtor();
}

void ChassisCtlCmd::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ChassisCtlCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisCtlCmd::descriptor() {
  ::protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_5fctl_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisCtlCmd& ChassisCtlCmd::default_instance() {
  ::protobuf_chassis_5fctl_5fcmd_2eproto::InitDefaultsChassisCtlCmd();
  return *internal_default_instance();
}

ChassisCtlCmd* ChassisCtlCmd::New(::google::protobuf::Arena* arena) const {
  ChassisCtlCmd* n = new ChassisCtlCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisCtlCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.control.ChassisCtlCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&start_robotic_ctl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_acc_) -
        reinterpret_cast<char*>(&start_robotic_ctl_)) + sizeof(enable_acc_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&release_throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_value_) -
        reinterpret_cast<char*>(&release_throttle_)) + sizeof(brake_value_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&gear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&epb_status_) -
        reinterpret_cast<char*>(&gear_)) + sizeof(epb_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisCtlCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.control.ChassisCtlCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_robotic_ctl = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_start_robotic_ctl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_robotic_ctl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_eps = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enable_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_throttle_sys = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enable_throttle_sys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_throttle_sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_ebs = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enable_ebs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ebs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_remote_ctl = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_enable_remote_ctl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_remote_ctl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_direct_ctl = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_enable_direct_ctl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_direct_ctl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_acc = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_enable_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool release_throttle = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_release_throttle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &release_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_angle = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_steering_wheel_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_speed = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_steering_wheel_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_torque = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_steering_wheel_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float velocity = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_value = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_acc_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_value = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_brake_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::ChassisCtlCmd_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_IsValid(value)) {
            set_turn_lamp(static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_SignalLamp_IsValid(value)) {
            set_brake_lamp(static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_WiperStatus_IsValid(value)) {
            set_wiper(static_cast< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_EpbStatus_IsValid(value)) {
            set_epb_status(static_cast< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.control.ChassisCtlCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.control.ChassisCtlCmd)
  return false;
#undef DO_
}

void ChassisCtlCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.control.ChassisCtlCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int32 start_robotic_ctl = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_robotic_ctl(), output);
  }

  // optional bool enable_eps = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_eps(), output);
  }

  // optional bool enable_throttle_sys = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_throttle_sys(), output);
  }

  // optional bool enable_ebs = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_ebs(), output);
  }

  // optional bool enable_remote_ctl = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_remote_ctl(), output);
  }

  // optional bool enable_direct_ctl = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_direct_ctl(), output);
  }

  // optional bool enable_acc = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_acc(), output);
  }

  // optional bool release_throttle = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->release_throttle(), output);
  }

  // optional float steering_wheel_angle = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->steering_wheel_angle(), output);
  }

  // optional float steering_wheel_speed = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_wheel_speed(), output);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_wheel_torque(), output);
  }

  // optional float velocity = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->velocity(), output);
  }

  // optional float acceleration = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->acceleration(), output);
  }

  // optional float acc_value = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->acc_value(), output);
  }

  // optional float brake_value = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->brake_value(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->gear(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->turn_lamp(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->brake_lamp(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->wiper(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->epb_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.control.ChassisCtlCmd)
}

::google::protobuf::uint8* ChassisCtlCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.control.ChassisCtlCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // optional int32 start_robotic_ctl = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_robotic_ctl(), target);
  }

  // optional bool enable_eps = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_eps(), target);
  }

  // optional bool enable_throttle_sys = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_throttle_sys(), target);
  }

  // optional bool enable_ebs = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_ebs(), target);
  }

  // optional bool enable_remote_ctl = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable_remote_ctl(), target);
  }

  // optional bool enable_direct_ctl = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_direct_ctl(), target);
  }

  // optional bool enable_acc = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_acc(), target);
  }

  // optional bool release_throttle = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->release_throttle(), target);
  }

  // optional float steering_wheel_angle = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->steering_wheel_angle(), target);
  }

  // optional float steering_wheel_speed = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->steering_wheel_speed(), target);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_wheel_torque(), target);
  }

  // optional float velocity = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->velocity(), target);
  }

  // optional float acceleration = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->acceleration(), target);
  }

  // optional float acc_value = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->acc_value(), target);
  }

  // optional float brake_value = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->brake_value(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->gear(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->turn_lamp(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->brake_lamp(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->wiper(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->epb_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.control.ChassisCtlCmd)
  return target;
}

size_t ChassisCtlCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.control.ChassisCtlCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->header_);
    }

    // optional int32 start_robotic_ctl = 2 [default = 0];
    if (has_start_robotic_ctl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_robotic_ctl());
    }

    // optional bool enable_eps = 3 [default = false];
    if (has_enable_eps()) {
      total_size += 1 + 1;
    }

    // optional bool enable_throttle_sys = 4 [default = false];
    if (has_enable_throttle_sys()) {
      total_size += 1 + 1;
    }

    // optional bool enable_ebs = 5 [default = false];
    if (has_enable_ebs()) {
      total_size += 1 + 1;
    }

    // optional bool enable_remote_ctl = 6 [default = false];
    if (has_enable_remote_ctl()) {
      total_size += 1 + 1;
    }

    // optional bool enable_direct_ctl = 7 [default = false];
    if (has_enable_direct_ctl()) {
      total_size += 1 + 1;
    }

    // optional bool enable_acc = 8 [default = false];
    if (has_enable_acc()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool release_throttle = 9 [default = false];
    if (has_release_throttle()) {
      total_size += 1 + 1;
    }

    // optional float steering_wheel_angle = 10 [default = 0];
    if (has_steering_wheel_angle()) {
      total_size += 1 + 4;
    }

    // optional float steering_wheel_speed = 11 [default = 0];
    if (has_steering_wheel_speed()) {
      total_size += 1 + 4;
    }

    // optional float steering_wheel_torque = 12 [default = 0];
    if (has_steering_wheel_torque()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 13 [default = 0];
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 14 [default = 0];
    if (has_acceleration()) {
      total_size += 1 + 4;
    }

    // optional float acc_value = 15 [default = 0];
    if (has_acc_value()) {
      total_size += 1 + 4;
    }

    // optional float brake_value = 16 [default = 0];
    if (has_brake_value()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
    if (has_gear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
    if (has_turn_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_lamp());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
    if (has_brake_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_lamp());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
    if (has_wiper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wiper());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
    if (has_epb_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epb_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisCtlCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.control.ChassisCtlCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisCtlCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisCtlCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.control.ChassisCtlCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.control.ChassisCtlCmd)
    MergeFrom(*source);
  }
}

void ChassisCtlCmd::MergeFrom(const ChassisCtlCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.control.ChassisCtlCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      start_robotic_ctl_ = from.start_robotic_ctl_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_eps_ = from.enable_eps_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_throttle_sys_ = from.enable_throttle_sys_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_ebs_ = from.enable_ebs_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_remote_ctl_ = from.enable_remote_ctl_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_direct_ctl_ = from.enable_direct_ctl_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_acc_ = from.enable_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      release_throttle_ = from.release_throttle_;
    }
    if (cached_has_bits & 0x00000200u) {
      steering_wheel_angle_ = from.steering_wheel_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_wheel_speed_ = from.steering_wheel_speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      steering_wheel_torque_ = from.steering_wheel_torque_;
    }
    if (cached_has_bits & 0x00001000u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_value_ = from.acc_value_;
    }
    if (cached_has_bits & 0x00008000u) {
      brake_value_ = from.brake_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00020000u) {
      turn_lamp_ = from.turn_lamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      brake_lamp_ = from.brake_lamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00100000u) {
      epb_status_ = from.epb_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisCtlCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.control.ChassisCtlCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisCtlCmd::CopyFrom(const ChassisCtlCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.control.ChassisCtlCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisCtlCmd::IsInitialized() const {
  return true;
}

void ChassisCtlCmd::Swap(ChassisCtlCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisCtlCmd::InternalSwap(ChassisCtlCmd* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(start_robotic_ctl_, other->start_robotic_ctl_);
  swap(enable_eps_, other->enable_eps_);
  swap(enable_throttle_sys_, other->enable_throttle_sys_);
  swap(enable_ebs_, other->enable_ebs_);
  swap(enable_remote_ctl_, other->enable_remote_ctl_);
  swap(enable_direct_ctl_, other->enable_direct_ctl_);
  swap(enable_acc_, other->enable_acc_);
  swap(release_throttle_, other->release_throttle_);
  swap(steering_wheel_angle_, other->steering_wheel_angle_);
  swap(steering_wheel_speed_, other->steering_wheel_speed_);
  swap(steering_wheel_torque_, other->steering_wheel_torque_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(acc_value_, other->acc_value_);
  swap(brake_value_, other->brake_value_);
  swap(gear_, other->gear_);
  swap(turn_lamp_, other->turn_lamp_);
  swap(brake_lamp_, other->brake_lamp_);
  swap(wiper_, other->wiper_);
  swap(epb_status_, other->epb_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisCtlCmd::GetMetadata() const {
  protobuf_chassis_5fctl_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_5fctl_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)
